annotate("text", x = 1, y = 30, label = "58.1%", color="white")+
theme(legend.position="none")+
#theme(legend.position = c(0.8, 0.2), legend.direction = "horizontal")+
scale_fill_manual(labels=c("No impact", "BM increases", "BM levels-out"), values=c(color2, color1, color3))
v4=both_jump%>%ggplot(aes(x=1, y = prop))+
geom_col(aes(fill=yep))+
setGraphs+
labs(fill= "", x="", y="Percentage of simulation runs")+
theme(axis.text.x = element_blank()) +
annotate("text", x = 1, y = 95, label = "10.0%", color="white")+
annotate("text", x = 1, y = 75, label = "31.8%", color="white")+
annotate("text", x = 1, y = 30, label = "58.1%", color="white")+
theme(legend.position="bottom")+
#theme(legend.position = c(0.8, 0.2), legend.direction = "horizontal")+
scale_fill_manual(labels=c("No impact", "BM increases", "BM levels-out"), values=c(color2, color1, color3))+
guides(fill=guide_legend(nrow=3))
v4
viz_jumps=grid.arrange(arrangeGrob(arrangeGrob(arrangeGrob(v2+ggtitle("a)"),v3+ggtitle("b)"), ncol=1, nrow=2)), v4+ggtitle("c)"), ncol=2, widths=c(3,2)))
numberJumps<-findKJumps(dataBase, seq(1,6, by=1), 2000, 50)
whenFinalJump<-findFinalKJumps(dataBase, seq(1,6, by=1), 2000, 50)
numberJumps2<-numberJumps%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
jumpDF<-data.frame(jumps=numberJumps2$variableOfInterest, K=baseData$K, TotalBM=baseData$TotalBM, variableValue=baseData$variableValue, cheaters=baseData$numCheaters)
whenFinalJump2<-whenFinalJump%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
baseJumpData<-data.frame(numJumps = numberJumps2$variableOfInterest, finalJump=whenFinalJump2$variableOfInterest, K=baseData$K, TotalBM=baseData$TotalBM, variableValue=baseData$variableValue, cheaters=baseData$numCheaters)
##########################
trough= findTrough(baseJumpData$finalJump, 20, 50)
baseJumpData<- baseJumpData%>%mutate(recentMeeting = finalJump>trough)
##########################
allData_plotK_BM<-allData%>%mutate(logger60= ((param=="log") & (variableValue==60)))
kBM_base_plot<-baseJumpData%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=recentMeeting))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(labels = c("No recent meeting", "Recent meeting"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_base_plot
# transparent?
kBM_allData_plot<-allData_plotK_BM%>%ggplot(aes(K, TotalBM*100, color=logger60))+
geom_point()+
xlim(0,20)+ ylim(0,45)+
setGraphs +
scale_color_manual(breaks=c(TRUE, FALSE), labels = c("60 Loggers", "All other parameter sets"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
#grid.arrange(kBM_allData_plot2, kBM_allData_plot)
ggsave("viz_kBM_base.pdf", kBM_base_plot, width=4.5, height=2.5, units="in")
ggsave("viz_kBM_allData.pdf", kBM_allData_plot, width=5, height=2.5, units="in")
cor(allData$TotalBM, allData$K)
cor(baseData$TotalBM, baseData$K)
cor((allData_plotK_BM%>%filter(!logger60))$TotalBM, (allData_plotK_BM%>%filter(!logger60))$K)
numberJumps<-findKJumps(dataBase, seq(1,6, by=1), 2000, 50)
whenFinalJump<-findFinalKJumps(dataBase, seq(1,6, by=1), 2000, 50)
numberJumps2<-numberJumps%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
jumpDF<-data.frame(jumps=numberJumps2$variableOfInterest, K=baseData$K, TotalBM=baseData$TotalBM, variableValue=baseData$variableValue, cheaters=baseData$numCheaters)
whenFinalJump2<-whenFinalJump%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
baseJumpData<-data.frame(numJumps = numberJumps2$variableOfInterest, finalJump=whenFinalJump2$variableOfInterest, K=baseData$K, TotalBM=baseData$TotalBM, variableValue=baseData$variableValue, cheaters=baseData$numCheaters)
##########################
trough= findTrough(baseJumpData$finalJump, 20, 50)
baseJumpData<- baseJumpData%>%mutate(recentMeeting = finalJump>trough)
##########################
allData_plotK_BM<-allData%>%mutate(logger60= ((param=="log") & (variableValue==60)))
kBM_base_plot<-baseJumpData%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=recentMeeting))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(labels = c("No recent meeting", "Recent meeting"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_base_plot
# transparent?
kBM_allData_plot<-allData_plotK_BM%>%ggplot(aes(K, TotalBM*100, color=logger60))+
geom_point()+
xlim(0,20)+ ylim(0,45)+
setGraphs +
scale_color_manual(breaks=c(TRUE, FALSE), labels = c("60 Loggers", "All other parameter sets"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
#grid.arrange(kBM_allData_plot2, kBM_allData_plot)
ggsave("viz_kBM_base.pdf", kBM_base_plot, width=4.5, height=2.5, units="in")
ggsave("viz_kBM_allData.pdf", kBM_allData_plot, width=5, height=2.5, units="in")
cor(allData$TotalBM, allData$K)
cor(baseData$TotalBM, baseData$K)
cor((allData_plotK_BM%>%filter(!logger60))$TotalBM, (allData_plotK_BM%>%filter(!logger60))$K)
kBM_allData_plot
# transparent?
kBM_allData_plot<-allData_plotK_BM%>%ggplot(aes(K, TotalBM*100, color=logger60))+
geom_point()+
xlim(0,20)+ ylim(0,45)+
setGraphs +
#scale_color_manual(breaks=c(TRUE, FALSE), labels = c("60 Loggers", "All other parameter sets"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_allData_plot
# transparent?
kBM_allData_plot<-#allData_plotK_BM%>%ggplot(aes(K, TotalBM*100, color=logger60))+
allData_plotK_BM%>%ggplot(aes(K, TotalBM*100))+
geom_point()+
xlim(0,20)+ ylim(0,45)+
setGraphs +
#scale_color_manual(breaks=c(TRUE, FALSE), labels = c("60 Loggers", "All other parameter sets"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_allData_plot
ggsave("viz_kBM_allData.pdf", kBM_allData_plot, width=5, height=2.5, units="in")
ggsave("viz_kBM_allData.pdf", kBM_allData_plot, width=3, height=2.5, units="in")
# transparent?
kBM_allData_plot<-allData_plotK_BM%>%ggplot(aes(K, TotalBM*100, color=logger60))+
geom_point()+
xlim(0,20)+ ylim(0,45)+
setGraphs +
scale_color_manual(breaks=c(TRUE, FALSE), labels = c("60 Loggers", "All other parameter sets"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_allData_plot
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS")
library(tidyverse)
library(ggthemes)
library(gridExtra)
#library(ggplot2)
#library(dplyr)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
source(file="setupFile2.R")
color="Set2"
axlab_size <- 12
axtick_size <- 10
ax_kf = expression(paste(bolditalic("final-institution")))
axlab_bm<-"Biomass (% remaining)"
axlab_density <- "Density"
axlab_time <- "Period"
axlab_perc <- "Percent remianing"
# make graph look nice by adding this to the end
setGraphs<- theme_bw()+
theme(axis.text=element_text(size=axtick_size, color="black"),
axis.title=element_text(size=axlab_size,face="bold", color="black"), legend.text = element_text(size=axtick_size))+
theme(panel.border = element_blank(), axis.line = element_line(colour = "black"))
#  scale_color_stata()
# scale_color_brewer(palette="Set1")
#colorDiscrete = scale_color_brewer(palette="Dark2")
colorDiscrete = scale_color_brewer(palette="Set2")
colorCont = scale_color_viridis_c(option = "magma")
#fillDiscrete = scale_fill_brewer(palette="Dark2")
fillDiscrete = scale_fill_brewer(palette="Set2")
fillCont = scale_fill_viridis_c(option = "magma")
# first two colors in Dark2
#1b9e77
#d95f02
color1="#66c2a5"
color2="#fc8d62"
color3="#8da0cb"
# scale_color_colorblind()
# scale_color_OkabeIto()
point_size = 3
line_size = 1.2
load("cheatProb_distribution.RData")
makeLegend<-cheatProb_distribution%>%filter(variable=="mon.1"|variable=="Sanc.5"|variable=="mon.9")%>%ggplot()+
geom_histogram(aes(x=cheaters, fill=variable), position="identity", binwidth = 0.05, alpha=0.5)+
labs(x="Probability of cheating", y=axlab_density)+
xlim(-0.1,1)+
scale_fill_manual(name = element_blank(), breaks=c("mon.9", "Sanc.5", "mon.1"), labels = c(expression(paste(italic(monitoring-level), " = 0.5, ", italic(sanction-level), " = 0.5")), expression(paste(italic(monitoring-level), " = 0.1, ", italic(sanction-level), " = 0.5")),expression(paste(italic(monitoring-level), " = 0.5, ", italic(sanction-level), " = 0.1"))), values=c(color3, color2, color1))+
#theme(legend.position="bottom")+
guides(fill = guide_legend(title.position="top", title.hjust = 0.5))
monSanc_legend= g_legend(makeLegend)
load("cheatProb_distribution.RData")
makeLegend<-cheatProb_distribution%>%filter(variable=="mon.1"|variable=="Sanc.5"|variable=="mon.9")%>%ggplot()+
geom_histogram(aes(x=cheaters, fill=variable), position="identity", binwidth = 0.05, alpha=0.5)+
labs(x="Probability of cheating", y=axlab_density)+
xlim(-0.1,1)+
scale_fill_manual(name = element_blank(), breaks=c("mon.9", "Sanc.5", "mon.1"), labels = c(expression(paste(italic(monitoring-level), " = 0.5, ", italic(sanction-level), " = 0.5")), expression(paste(italic(monitoring-level), " = 0.1, ", italic(sanction-level), " = 0.5")),expression(paste(italic(monitoring-level), " = 0.5, ", italic(sanction-level), " = 0.1"))), values=c(color3, color2, color1))+
#theme(legend.position="bottom")+
guides(fill = guide_legend(title.position="top", title.hjust = 0.5))
monSanc_legend= g_legend(makeLegend)
tmp <- ggplot_gtable(ggplot_build(a.gplot))
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
load("cheatProb_distribution.RData")
makeLegend<-cheatProb_distribution%>%filter(variable=="mon.1"|variable=="Sanc.5"|variable=="mon.9")%>%ggplot()+
geom_histogram(aes(x=cheaters, fill=variable), position="identity", binwidth = 0.05, alpha=0.5)+
labs(x="Probability of cheating", y=axlab_density)+
xlim(-0.1,1)+
scale_fill_manual(name = element_blank(), breaks=c("mon.9", "Sanc.5", "mon.1"), labels = c(expression(paste(italic(monitoring-level), " = 0.5, ", italic(sanction-level), " = 0.5")), expression(paste(italic(monitoring-level), " = 0.1, ", italic(sanction-level), " = 0.5")),expression(paste(italic(monitoring-level), " = 0.5, ", italic(sanction-level), " = 0.1"))), values=c(color3, color2, color1))+
#theme(legend.position="bottom")+
guides(fill = guide_legend(title.position="top", title.hjust = 0.5))
monSanc_legend= g_legend(makeLegend)
ax_pc = expression(bolditalic(prob-cheat))
v_monLow=cheatProb_distribution%>%filter(variable=="mon.1")%>%ggplot()+
geom_density(aes(x=cheaters, fill=variable),  adjust = 2, fill=color2, alpha=0.3)+
labs(x=element_blank(), y=element_blank())+
xlim(0,1)+
ylim(0,4)+
setGraphs#+
#theme(legend.position='none')
v_mid=cheatProb_distribution%>%filter(variable=="Sanc.5")%>%ggplot()+
geom_density(aes(x=cheaters, fill=variable),  adjust = 2, fill=color1, alpha=0.3)+
labs(x=element_blank(), y=axlab_density)+
xlim(0,1)+
ylim(0,4)+
setGraphs#+
#theme(legend.position='none')
v_sancLow=cheatProb_distribution%>%filter(variable=="Sanc.1")%>%ggplot()+
geom_density(aes(x=cheaters, fill=variable),  adjust = 2, fill=color3, alpha=0.3)+
labs(x=element_blank(), y=element_blank())+
xlim(0,1)+
ylim(0,4)+
#scale_fill_discrete(name = "monitoring-level", labels = c("0.1", "0.5", "0.9"))+
setGraphs+
theme(legend.position='none')
viz_monSanc = grid.arrange(arrangeGrob(v_mid, v_monLow, v_sancLow, ncol=3), monSanc_legend, nrow=2, heights=c(7,4))
viz_monSanc=annotate_figure(viz_monSanc,
bottom = text_grob(expression(bolditalic(prob-cheat)), vjust = -8,  size = axlab_size),
)
ggsave("viz_monSanc.pdf", viz_monSanc, width=5.75, height=3.5, units="in")
cheatProb_distribution%>%filter(variable=="Sanc.9")%>%group_by(cheaters<0.01)%>%summarize(n())
cheatProb_distribution%>%filter(variable=="mon.9")%>%group_by(cheaters<0.01)%>%summarize(n())
983/1000
v_mid
v_monLow
v_sancLow
viz_monSanc=annotate_figure(viz_monSanc,
bottom = text_grob(expression(bolditalic(prob-cheat)), vjust = -8,  size = axlab_size),
)
viz_monSanc
load("cheatProb_distribution.RData")
makeLegend<-cheatProb_distribution%>%filter(variable=="mon.1"|variable=="Sanc.5"|variable=="mon.9")%>%ggplot()+
geom_histogram(aes(x=cheaters, fill=variable), position="identity", binwidth = 0.05, alpha=0.5)+
labs(x="Probability of cheating", y=axlab_density)+
xlim(-0.1,1)+
scale_fill_manual(name = element_blank(), breaks=c("mon.9", "Sanc.5", "mon.1"), labels = c(expression(paste(italic(monitoring-level), " = 0.5, ", italic(sanction-level), " = 0.5")), expression(paste(italic(monitoring-level), " = 0.1, ", italic(sanction-level), " = 0.5")),expression(paste(italic(monitoring-level), " = 0.5, ", italic(sanction-level), " = 0.1"))), values=c(color2, color3, color1))+
#theme(legend.position="bottom")+
guides(fill = guide_legend(title.position="top", title.hjust = 0.5))
monSanc_legend= g_legend(makeLegend)
ax_pc = expression(bolditalic(prob-cheat))
v_monLow=cheatProb_distribution%>%filter(variable=="mon.1")%>%ggplot()+
geom_density(aes(x=cheaters, fill=variable),  adjust = 2, fill=color2, alpha=0.3)+
labs(x=element_blank(), y=element_blank())+
xlim(0,1)+
ylim(0,4)+
setGraphs#+
#theme(legend.position='none')
v_mid=cheatProb_distribution%>%filter(variable=="Sanc.5")%>%ggplot()+
geom_density(aes(x=cheaters, fill=variable),  adjust = 2, fill=color1, alpha=0.3)+
labs(x=element_blank(), y=axlab_density)+
xlim(0,1)+
ylim(0,4)+
setGraphs#+
#theme(legend.position='none')
v_sancLow=cheatProb_distribution%>%filter(variable=="Sanc.1")%>%ggplot()+
geom_density(aes(x=cheaters, fill=variable),  adjust = 2, fill=color3, alpha=0.3)+
labs(x=element_blank(), y=element_blank())+
xlim(0,1)+
ylim(0,4)+
#scale_fill_discrete(name = "monitoring-level", labels = c("0.1", "0.5", "0.9"))+
setGraphs+
theme(legend.position='none')
v_mid
v_monLow
v_sancLow
viz_monSanc = grid.arrange(arrangeGrob(v_mid, v_monLow, v_sancLow, ncol=3), monSanc_legend, nrow=2, heights=c(7,4))
viz_monSanc=annotate_figure(viz_monSanc,
bottom = text_grob(expression(bolditalic(prob-cheat)), vjust = -8,  size = axlab_size),
)
viz_monSanc
ggsave("viz_monSanc.pdf", viz_monSanc, width=5.75, height=3.5, units="in")
cheatProb_distribution%>%filter(variable=="Sanc.9")%>%group_by(cheaters<0.01)%>%summarize(n())
cheatProb_distribution%>%filter(variable=="mon.9")%>%group_by(cheaters<0.01)%>%summarize(n())
load("cheatProb_distribution.RData")
makeLegend<-cheatProb_distribution%>%filter(variable=="mon.1"|variable=="Sanc.5"|variable=="mon.9")%>%ggplot()+
geom_histogram(aes(x=cheaters, fill=variable), position="identity", binwidth = 0.05, alpha=0.5)+
labs(x="Probability of cheating", y=axlab_density)+
xlim(-0.1,1)+
scale_fill_manual(name = element_blank(), breaks=c("mon.9", "Sanc.5", "mon.1"), labels = c(expression(paste(italic(monitoring-level), " = 0.5, ", italic(sanction-level), " = 0.5")), expression(paste(italic(monitoring-level), " = 0.1, ", italic(sanction-level), " = 0.5")),expression(paste(italic(monitoring-level), " = 0.5, ", italic(sanction-level), " = 0.1"))), values=c(color3, color1, color2))+
#theme(legend.position="bottom")+
guides(fill = guide_legend(title.position="top", title.hjust = 0.5))
monSanc_legend= g_legend(makeLegend)
ax_pc = expression(bolditalic(prob-cheat))
v_monLow=cheatProb_distribution%>%filter(variable=="mon.1")%>%ggplot()+
geom_density(aes(x=cheaters, fill=variable),  adjust = 2, fill=color2, alpha=0.3)+
labs(x=element_blank(), y=element_blank())+
xlim(0,1)+
ylim(0,4)+
setGraphs#+
#theme(legend.position='none')
v_mid=cheatProb_distribution%>%filter(variable=="Sanc.5")%>%ggplot()+
geom_density(aes(x=cheaters, fill=variable),  adjust = 2, fill=color1, alpha=0.3)+
labs(x=element_blank(), y=axlab_density)+
xlim(0,1)+
ylim(0,4)+
setGraphs#+
#theme(legend.position='none')
v_sancLow=cheatProb_distribution%>%filter(variable=="Sanc.1")%>%ggplot()+
geom_density(aes(x=cheaters, fill=variable),  adjust = 2, fill=color3, alpha=0.3)+
labs(x=element_blank(), y=element_blank())+
xlim(0,1)+
ylim(0,4)+
#scale_fill_discrete(name = "monitoring-level", labels = c("0.1", "0.5", "0.9"))+
setGraphs+
theme(legend.position='none')
v_mid
v_monLow
v_sancLow
viz_monSanc = grid.arrange(arrangeGrob(v_mid, v_monLow, v_sancLow, ncol=3), monSanc_legend, nrow=2, heights=c(7,4))
viz_monSanc=annotate_figure(viz_monSanc,
bottom = text_grob(expression(bolditalic(prob-cheat)), vjust = -8,  size = axlab_size),
)
viz_monSanc
ggsave("viz_monSanc.pdf", viz_monSanc, width=5.75, height=3.5, units="in")
cheatProb_distribution%>%filter(variable=="Sanc.9")%>%group_by(cheaters<0.01)%>%summarize(n())
cheatProb_distribution%>%filter(variable=="mon.9")%>%group_by(cheaters<0.01)%>%summarize(n())
#remove(JGR)
#install.packages("JGR")
Sys.setenv(NOAWT=1)
library(JGR)
Sys.unsetenv("NOAWT")
JGR()
#rt_boxplot<-rtData%>%ggplot(aes(x=variableValue, y=TotalBM, fill=eval(parse(text = fillVariable))))+
# divide varaibleValue by 10 bc it was multiplied by ten to make data manipulation easier
rt_boxplot<-rtData2%>%ggplot(aes(x=variableValue/10, y=TotalBM*100))+
geom_boxplot()+
fillCont+
setGraphs+
labs(y=axlab_bm, x=expression(bolditalic("reference-threshold")))
rtData2<-rtData%>%mutate(param="rt")%>%addMeans()
#rt_boxplot<-rtData%>%ggplot(aes(x=variableValue, y=TotalBM, fill=eval(parse(text = fillVariable))))+
# divide varaibleValue by 10 bc it was multiplied by ten to make data manipulation easier
rt_boxplot<-rtData2%>%ggplot(aes(x=variableValue/10, y=TotalBM*100))+
geom_boxplot()+
fillCont+
setGraphs+
labs(y=axlab_bm, x=expression(bolditalic("reference-threshold")))
ggsave("viz_rtBoxplot.pdf", rt_boxplot, width=4, height=2.5, units="in")
#rt_boxplot<-rtData%>%ggplot(aes(x=variableValue, y=TotalBM, fill=eval(parse(text = fillVariable))))+
# divide varaibleValue by 10 bc it was multiplied by ten to make data manipulation easier
rt_boxplot<-rtData2%>%ggplot(aes(x=variableValue, y=TotalBM*100))+
geom_boxplot()+
fillCont+
setGraphs+
labs(y=axlab_bm, x=expression(bolditalic("reference-threshold")))
rt_boxplot
#rt_boxplot<-rtData%>%ggplot(aes(x=variableValue, y=TotalBM, fill=eval(parse(text = fillVariable))))+
# divide varaibleValue by 10 bc it was multiplied by ten to make data manipulation easier
rt_boxplot<-rtData2%>%ggplot(aes(x=variableValue/10, y=TotalBM*100))+
geom_boxplot()+
fillCont+
setGraphs+
labs(y=axlab_bm, x=expression(bolditalic("reference-threshold")))
rt_boxplot
#rt_boxplot<-rtData%>%ggplot(aes(x=variableValue, y=TotalBM, fill=eval(parse(text = fillVariable))))+
# divide varaibleValue by 10 bc it was multiplied by ten to make data manipulation easier
rt_boxplot<-rtData2%>%ggplot(aes(x=as.factor(as.numeric(variableValue)/10), y=TotalBM*100))+
geom_boxplot()+
fillCont+
setGraphs+
labs(y=axlab_bm, x=expression(bolditalic("reference-threshold")))
rt_boxplot
ggsave("viz_rtBoxplot.pdf", rt_boxplot, width=4, height=2.5, units="in")
x<-maxK(dataRT, seq(1,10, by=1), 2000, 50)
#jumps_test<-findKJumps(dataRT, seq(1,10, by=1), 2000, 50)
numberJumps<-findKJumps(dataRT, seq(1,10, by=1), 2000, 50)
whenFinalJump<-findFinalKJumps(dataRT, seq(1,10, by=1), 2000, 50)
numberJumps2<-numberJumps%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
jumpDF<-data.frame(maxK=x, jumps=numberJumps2$variableOfInterest, K=rtData$K, TotalBM=rtData$TotalBM, variableValue=rtData$variableValue, cheaters=rtData$numCheaters)
whenFinalJump2<-whenFinalJump%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
rtJumpData<-data.frame(maxK=x, numJumps = numberJumps2$variableOfInterest, finalJump=whenFinalJump2$variableOfInterest, K=rtData$K, TotalBM=rtData$TotalBM, variableValue=rtData$variableValue, cheaters=rtData$numCheaters)
rtJumpData<- rtJumpData%>%mutate(recentMeeting = finalJump>20)
rtJumpData<- rtJumpData%>%mutate(jumpCat = ifelse(as.numeric(numJumps)<2,"once", ifelse(as.numeric(numJumps)<3, "twice","3+ times")))%>%mutate(jumpCat=factor(jumpCat))
viz_rt_jump=rtJumpData%>%ggplot(aes(variableValue, K))+
geom_point(aes(color=jumpCat, shape=recentMeeting, size=recentMeeting), position="jitter")+
scale_color_brewer(palette="Dark2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
scale_shape(name="", breaks=c(TRUE, FALSE), labels=c("Recent meeting", "No recent meeting"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(2.5,1.5))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
x<-maxK(dataRT, seq(1,10, by=1), 2000, 50)
#jumps_test<-findKJumps(dataRT, seq(1,10, by=1), 2000, 50)
numberJumps<-findKJumps(dataRT, seq(1,10, by=1), 2000, 50)
whenFinalJump<-findFinalKJumps(dataRT, seq(1,10, by=1), 2000, 50)
numberJumps2<-numberJumps%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
jumpDF<-data.frame(maxK=x, jumps=numberJumps2$variableOfInterest, K=rtData$K, TotalBM=rtData$TotalBM, variableValue=rtData$variableValue, cheaters=rtData$numCheaters)
whenFinalJump2<-whenFinalJump%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
rtJumpData<-data.frame(maxK=x, numJumps = numberJumps2$variableOfInterest, finalJump=whenFinalJump2$variableOfInterest, K=rtData$K, TotalBM=rtData$TotalBM, variableValue=rtData$variableValue, cheaters=rtData$numCheaters)
rtJumpData<- rtJumpData%>%mutate(recentMeeting = finalJump>20)
rtJumpData<- rtJumpData%>%mutate(jumpCat = ifelse(as.numeric(numJumps)<2,"once", ifelse(as.numeric(numJumps)<3, "twice","3+ times")))%>%mutate(jumpCat=factor(jumpCat))
color="Set2"
axlab_size <- 12
axtick_size <- 10
ax_kf = expression(paste(bolditalic("final-institution")))
axlab_bm<-"Biomass (% remaining)"
axlab_density <- "Density"
axlab_time <- "Period"
axlab_perc <- "Percent remianing"
# make graph look nice by adding this to the end
setGraphs<- theme_bw()+
theme(axis.text=element_text(size=axtick_size, color="black"),
axis.title=element_text(size=axlab_size,face="bold", color="black"), legend.text = element_text(size=axtick_size))+
theme(panel.border = element_blank(), axis.line = element_line(colour = "black"))
#  scale_color_stata()
# scale_color_brewer(palette="Set1")
#colorDiscrete = scale_color_brewer(palette="Dark2")
colorDiscrete = scale_color_brewer(palette="Set2")
colorCont = scale_color_viridis_c(option = "magma")
#fillDiscrete = scale_fill_brewer(palette="Dark2")
fillDiscrete = scale_fill_brewer(palette="Set2")
fillCont = scale_fill_viridis_c(option = "magma")
# first two colors in Dark2
#1b9e77
#d95f02
color1="#66c2a5"
color2="#fc8d62"
color3="#8da0cb"
# scale_color_colorblind()
# scale_color_OkabeIto()
point_size = 3
line_size = 1.2
#source(file="setupOrigModelData.R")
source(file="setupVallino.R")
ax_rt=expression(bolditalic("reference-threshold"))
viz_vallinoRTboxplot=rtData_vallino%>%ggplot(aes(x=variableValue, y=TotalBM*100))+geom_boxplot()+
labs(x=ax_rt, y=axlab_bm)+
setGraphs+
theme(legend.position = "none")+
theme(axis.title=element_text(size=axlab_size))
viz_vallinoRTboxplot
ggsave("viz_vallinoRTboxplot.pdf", viz_vallinoRTboxplot, width=4, height=2.5, units="in")
ax_rt=expression(bolditalic("reference-threshold"))
viz_vallinoRTboxplot=rtData_vallino%>%ggplot(aes(x=as.factor(as.numeric(variableValue)/10), y=TotalBM*100))+geom_boxplot()+
labs(x=ax_rt, y=axlab_bm)+
setGraphs+
theme(legend.position = "none")+
theme(axis.title=element_text(size=axlab_size))
viz_vallinoRTboxplot
ggsave("viz_vallinoRTboxplot.pdf", viz_vallinoRTboxplot, width=4, height=2.5, units="in")
viz_rt_jump=rtJumpData%>%ggplot(aes(variableValue, K))+
geom_point(aes(color=jumpCat, shape=recentMeeting, size=recentMeeting), position="jitter")+
scale_color_brewer(palette="Dark2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
scale_shape(name="", breaks=c(TRUE, FALSE), labels=c("Recent meeting", "No recent meeting"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(2.5,1.5))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
viz_rt_jump
ggsave("viz_rtJump.pdf", viz_rt_jump, width=5.75, height=3, units="in")
cor(allData$K, allData$numCheaters)
viz_rt_jump=rtJumpData%>%ggplot(aes(as.factor(as.numeric(variableValue)/10), K))+
geom_point(aes(color=jumpCat, shape=recentMeeting, size=recentMeeting), position="jitter")+
scale_color_brewer(palette="Dark2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
scale_shape(name="", breaks=c(TRUE, FALSE), labels=c("Recent meeting", "No recent meeting"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(2.5,1.5))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
viz_rt_jump
ggsave("viz_rtJump.pdf", viz_rt_jump, width=5.75, height=3, units="in")
cor(allData$K, allData$numCheaters)
knitr::opts_chunk$set(echo = TRUE)
head(cars)
cars
cars$time = rep(1:10, times = 5)
cars
cars%>%ggplot(aes(x = speed, y = dist))+
geom_point()+
transition_states(times, transition_length = 2,
state_length = 1)
library(dplyr)
cars%>%ggplot(aes(x = speed, y = dist))+
geom_point()+
transition_states(times, transition_length = 2,
state_length = 1)
library(tidyverse)
cars%>%ggplot(aes(x = speed, y = dist))+
geom_point()+
transition_states(times, transition_length = 2,
state_length = 1)
library(gganimate)
cars%>%ggplot(aes(x = speed, y = dist))+
geom_point()+
transition_states(times, transition_length = 2,
state_length = 1)
cars%>%ggplot(aes(x = speed, y = dist))#+
cars%>%ggplot(aes(x = speed, y = dist))+
geom_point()#+
cars%>%ggplot(aes(x = speed, y = dist))+
geom_point()+
transition_states(times, transition_length = 2,state_length = 1)
cars%>%ggplot(aes(x = speed, y = dist))+
geom_point()+
transition_states(time, transition_length = 2,state_length = 1)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/allData_IS")
load("logger_and_bm_data.RData")
rm(list = ls())
load("logger_and_bm_data.RData")
View(logBM)
View(logData)
load("changeEnf_log1000.RData")
View(enf1)
rm(list = ls())

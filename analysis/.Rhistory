facet_wrap(vars(location))+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Screening Rate")+
ggtitle("East End Colorectal Screenings")
# East end
nLocations = length(unique(clean_data$location))
p1 = list()
for( i in 1: nLocations){
location_i = clean_data$location[i]
p1[[i]] = clean_data%>%filter(location == location_i)%>%
ggplot(aes(x = date, y = all_patients))+
geom_bar(stat = "identity")+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ggtitle(paste(location_i, "Patients (50-75 years old)"))
# # find middle of data
# mid = clean_data%>%filter(location == location_i)%>%summarize(min_rate = min(screening_rate), max_rate = max(screening_rate))
# mid = (mid$max_rate + mid$min_rate)/2
#
# p2 = clean_data%>%filter(location == location_i)%>%
#   ggplot(aes(x = date, y = screening_rate))+
#   geom_point(aes(size = all_patients), color = "blue", alpha = 0.6)+
#   geom_line()+
#   theme_bw()+
#   guides(size = FALSE)+
#   expand_limits(y = c(mid - 2, mid + 2))+
#   labs(x = "Date", y = "Screening Rate")+
#   ggtitle(paste(location_i, "Colorectal Screenings"))
}
print(p1)
grid.arrange(grobs = p1)
clean_data%>%group_by(location)%>%summarize(rate_range = range(screening_rate))
range(c(1,2,3))
clean_data%>%group_by(location)%>%summarize(rate_range = max(screening_rate)- min(screening_rate))
temp_data = clean_data%>%group_by(location)%>%summarize(rate_range = max(screening_rate)- min(screening_rate), mean_rate = mean(screening_rate))
temp_data
max_range = temp_data%>%filter(max(rate_range))$rate_range
max_range = temp_data%>%filter(max(rate_range))
max_range = temp_data%>%filter(rate_range == max(rate_range))
max_range
max_range = temp_data%>%filter(rate_range == max(rate_range))$rate_range
max_range = max_range$rate_range
max_range
temp_data = clean_data%>%group_by(location)%>%summarize(rate_range = max(screening_rate)- min(screening_rate), middle_rate = min(screening_rate) + 0.5 * rate_range)
temp_data
clean_data
temp_data
clean_data
temp_data%>%mutate(ymin = middle_rate - 0.5 * max_range, ymax = middle_rate + 0.5 * max_range)
y_ranges = temp_data%>%mutate(ymin = middle_rate - 0.5 * max_range, ymax = middle_rate + 0.5 * max_range)
i = 1
location_i = clean_data$location[i]
location_i
y_ranges$location[i]
y_ranges$location
y_ranges$location[i]
clean_data$location
clean_data%>%filter(location == location_i)%>%
ggplot(aes(x = date, y = all_patients))+
geom_bar(stat = "identity")+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(y_ranges$ymin[i], y_ranges$ymax[i])
clean_data%>%filter(location == location_i)%>%
ggplot(aes(x = date, y = all_patients))+
geom_bar(stat = "identity")+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(y_ranges$ymin[i], y_ranges$ymax[i])+
ggtitle(paste(location_i, "Patients (50-75 years old)"))
clean_data%>%filter(location == location_i)%>%
ggplot(aes(x = date, y = screening_rate))+
geom_line()+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(y_ranges$ymin[i], y_ranges$ymax[i])+
ggtitle(paste(location_i, "Patients (50-75 years old)"))
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
find_row_index
find_word_row
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
p = df%>%filter(location == loc)%>%
ggplot(aes(x = date, y = screening_rate))+
geom_line()+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(ymin, ymax)+
ggtitle(paste(loc, input$screening.type))
create_screening_plot = function(df, loc, ymin, ymax){
p = df%>%filter(location == loc)%>%
ggplot(aes(x = date, y = screening_rate))+
geom_line()+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(ymin, ymax)+
ggtitle(paste(loc, input$screening.type))
return(p)
}
y_ranges
create_screening_plot(clean_data, "East End", y_ranges$ymin[4], y_ranges$ymax[4])
create_screening_plot = function(df, loc, ymin, ymax){
p = df%>%filter(location == loc)%>%
ggplot(aes(x = date, y = screening_rate))+
geom_line()+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(ymin, ymax)+
ggtitle(paste(loc))
return(p)
}
create_screening_plot(clean_data, "East End", y_ranges$ymin[4], y_ranges$ymax[4])
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
install.packages("directlabels")
runApp('Documents/dad_data_project/experimentingColonApp')
brewer.pal(n = 8, name = "Dark2")
runApp('Documents/dad_data_project/experimentingColonApp')
library("RColorBrewer")
brewer.pal(12, "Set3")
runApp('Documents/dad_data_project/experimentingColonApp')
brewer.pal(12, "Dark2")
brewer.pal(12, "Dark2")
runApp('Documents/dad_data_project/experimentingColonApp')
getwd()
getwd()
?readcsv
?read_csv
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location = relevel(clean_data$location, "All")
View(clean_data)
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
N
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location = relevel(clean_data$location, "All")
clean_data$location = relevel(clean_data$location, "All")
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
labs(x = ax.date, y = ax.screening, color = ax.location)+
ggtitle(input$screening.type)+
plot_options+
scale_x_date(date_breaks = "1 month",
date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
clean_data%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
ggtitle(input$screening.type)+
plot_options+
scale_x_date(date_breaks = "1 month",
date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
clean_data%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
ggtitle(input$screening.type)+
plot_options+
#scale_x_date(date_breaks = "1 month",
date_labels = "%b %Y",
clean_data%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
ggtitle(input$screening.type)+
plot_options+
#scale_x_date(date_breaks = "1 month",
#date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
#limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
clean_data%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
#ggtitle(input$screening.type)+
#plot_options+
#scale_x_date(date_breaks = "1 month",
#date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
#limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
#ggtitle(input$screening.type)+
#plot_options+
#scale_x_date(date_breaks = "1 month",
#date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
#limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
clean_data%>%filter(location != "CHC")%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
#ggtitle(input$screening.type)+
#plot_options+
#scale_x_date(date_breaks = "1 month",
#date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
#limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
library(colorspace)
darken("red")
"red"
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
plot_colors = darken(c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
plot_colors[i+1]
c(plot_colors[i+1])
create_patient_barplot(clean_data, "East End", 1000)
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
week(2)
months(2)
days(30)
day(30)
runApp('Documents/dad_data_project/experimentingColonApp')
months(2)
runApp('Documents/dad_data_project/experimentingColonApp')
library(lubridate)
months(2)
days(2)
weeks(6)
runApp('Documents/dad_data_project/experimentingColonApp')
head(clean_data)
clean_data$date[11]-clean_data$date[1]
clean_data$date[16]-clean_data$date[1]
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp()
runApp('Documents/dad_data_project/experimentingColonApp')
runApp()
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/appVersions')
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
library(colorspace)
source(file="setupFile2.R")
load("./allData_IS/vallinoData/vallino_changeCost.RData")
vallino_dataCost<-dataOut
load("./allData_IS/vallinoData/vallino_changeCost.RData")
getwd()
source(file="setupVallino.R")
color="Set2"
axlab_size <- 12
axtick_size <- 10
ax_kf = expression(paste(bolditalic("final-institution")))
axlab_bm<-"Biomass (% remaining)"
axlab_density <- "Density"
axlab_time <- "Period"
axlab_perc <- "Percent remianing"
ax_sanc = expression(bolditalic(sanction-level))
ax_mon = expression(bolditalic(monitoring-level))
ax_rt=expression(bolditalic("reference-threshold"))
ax_surveillance=expression(bold(bolditalic("surveillance-level")))
ax_mc=expression(bold(bolditalic("minimum-cut")))
# make graph look nice by adding this to the end
setGraphs<- theme_bw()+
theme(axis.text=element_text(size=axtick_size, color="black"),
axis.title=element_text(size=axlab_size,face="bold", color="black"), legend.text = element_text(size=axtick_size))+
theme(panel.border = element_blank(), axis.line = element_line(colour = "black"))
#  scale_color_stata()
# scale_color_brewer(palette="Set1")
#colorDiscrete = scale_color_brewer(palette="Dark2")
colorDiscrete = scale_color_brewer(palette="Set2")
colorCont = scale_color_viridis_c(option = "magma")
#fillDiscrete = scale_fill_brewer(palette="Dark2")
fillDiscrete = scale_fill_brewer(palette="Set2")
fillCont = scale_fill_viridis_c(option = "magma")
# first two colors in Dark2
#1b9e77
#d95f02
color1="#66c2a5"
color2="#fc8d62"
color3="#8da0cb"
# scale_color_colorblind()
# scale_color_OkabeIto()
point_size = 3
line_size = 1.2
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
vallino_lm = lm(TotalBM*100 ~ numLoggers+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
allData1_vallino<-allData_vallino%>%mutate(categories=ifelse(variableValue==300, "log300", ifelse(param=="enf" & variableValue==100, "enf100", 0)))
viz_vallinoKf=allData1_vallino%>%ggplot(aes(K, TotalBM*100, color=categories))+
geom_point(alpha=0.7, size=2)+
setGraphs+
labs(x=ax_kf, y=axlab_bm)+
scale_color_brewer(palette="Set2", name="test", breaks=c("log300", "enf100", "0"), labels=c(expression(paste(italic("initial-loggers"), " = 300")), expression(paste(italic("surveillance-level"), " = 0")), "All other parameter sets"))+
#colorDiscrete+
theme(legend.title=element_blank())
viz_vallinoKf
viz_vallinoKf=allData1_vallino%>%ggplot(aes(K, TotalBM*100, color=categories))+
geom_point(alpha=0.7, size=2)+
setGraphs+
labs(x=ax_kf, y=axlab_bm)+
scale_color_brewer(palette="Set2", name="test", breaks=c("log300", "enf100", "0"), labels=c(expression(paste(italic("initial-loggers"), " = 300")), expression(paste(italic("monitoring-level"), " = 0")), "All other parameter sets"))+
#colorDiscrete+
theme(legend.title=element_blank())
viz_vallinoKf
ggsave("./figs/viz_vallinoKf.pdf", viz_vallinoKf, width=5.75, height=3, units="in")
head(enfData_vallino)
head(enfData_vallino, -6)
vallino_lm2 = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino%>%filter(variableValue != 100))
summary(vallino_lm2)
vallino_lm2 = lm(TotalBM*100 ~ numLoggers+as.numeric(variableValue), data = enfData_vallino%>%filter(variableValue != 100))
summary(vallino_lm2)
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
vallino_lm2 = lm(TotalBM*100 ~ numLoggers+as.numeric(variableValue), data = enfData_vallino%>%filter(variableValue != 100))
summary(vallino_lm2)
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
vallino_lm2 = lm(TotalBM*100 ~ numLoggers+as.numeric(variableValue), data = enfData_vallino%>%filter(variableValue != 100))
summary(vallino_lm2)
monitoring_lm = lm(TotalBM*100 ~ K+as.numeric(variableValue), data = monitoringData)
summary(monitoring_lm)
sanction_lm = lm(TotalBM*100 ~ K+as.numeric(variableValue), data = sanctionData)
summary(sanction_lm)
monitoring_lm = lm(TotalBM*100 ~ K+as.numeric(variableValue), data = monitoringData)
summary(monitoring_lm)
sanction_lm = lm(TotalBM*100 ~ K+as.numeric(variableValue), data = sanctionData)
summary(sanction_lm)
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
library(colorspace)
source(file="setupFile2.R")
source(file="setupVallino.R")
load("./allData_IS/vallinoData/vallino_changeCost.RData")
getwd()
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
load("./allData_IS/vallinoData/vallino_changeCost.RData")
vallino_dataCost<-dataOut
load("./allData_IS/vallinoData/vallino_changeMTG.RData")
vallino_dataMTG<-dataOut
load("./allData_IS/vallinoData/vallino_changeLog.RData")
vallino_dataLog<-dataOut
load("./allData_IS/vallinoData/vallino_changeRT.RData")
vallino_dataRT<-dataOut
load("./allData_IS/vallinoData/vallino_changeEnf.RData")
vallino_dataEnf <-dataOut
View(vallino_dataEnf)
load("./allData_IS/vallino_removed_rt.RData")
vallino_data_removed_rt <- dataOut
costData_vallino<-finalStats_allOutputs(vallino_dataCost, seq(0,20, by=2),  2000, 50)
mtgData_vallino<-finalStats_allOutputs(vallino_dataMTG, seq(5,30, by=5), 2000, 50)
logData_vallino<-finalStats_allOutputs(vallino_dataLog, seq(50,300, by=50),  2000, 50)
rtData_vallino<-finalStats_allOutputs(vallino_dataRT, seq(1,10, by=1),  2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
removedRTData_vallino<-finalStats_allOutputs_extra(vallino_data_removed_rt, c(50), 2000, 50)
mtgData_vallino<-mtgData_vallino%>%mutate(param="mtg")#%>%addMeans()
costData_vallino<-costData_vallino%>%mutate(param="cost")#%>%addMeans()
rtData_vallino<-rtData_vallino%>%mutate(param="rt")#%>%addMeans()
logData_vallino<-logData_vallino%>%mutate(param="log")#%>%addMeans()
enfData_vallino<-enfData_vallino%>%mutate(param="enf")#%>%addMeans()
allData_vallino<-rbind(mtgData_vallino, costData_vallino,  enfData_vallino, rtData_vallino)
allData_vallino<-rbind(mtgData_vallino, costData_vallino, rtData_vallino, logData_vallino,  enfData_vallino)
allData_vallino<-allData_vallino%>%mutate(param=as.factor(param))
# all simulations use base parameteres
baseData_vallino<-allData_vallino%>%filter((param=="cost" & variableValue==5)|(param=="mtg" & variableValue==20)|(param=="rt" & variableValue==5)|(param=="log" & variableValue==100)|(param=="enf" & variableValue==50))
as.integer(10/2)
10/2
x = 10/2
typeof(x)
typeof(as.integer(x))

load("./allData_IS/M&S_model_data/myMod_changeSanction_setUnsat2.RData")
dataSanction<-dataOut
}
# convert raw data to end-of-simulation summary statistics
costData<-finalStats_allOutputs(dataCost, seq(0,20, by=2),  2000, 50)
mtgData<-finalStats_allOutputs(dataMTG, seq(5,30, by=5), 2000, 50)
logData<-finalStats_allOutputs(dataLog, seq(60,200, by=20),  2000, 50)
rtData<-finalStats_allOutputs(dataRT, seq(1,10, by=1),  2000, 50)
monitoringData<-finalStats_allOutputs(dataMonitoring, seq(0,100, by=10), 2000, 50)
cheatData<-finalStats_allOutputs(dataCheat, seq(0,10, by=1), 2000, 50)
sanctionData<-finalStats_allOutputs(dataSanction, seq(0,10, by=1), 2000, 50)
# collect all runs conducted under base parameters
dataBase<-list()
dataBase[[1]]<- dataMTG[[4]]
dataBase[[2]]<-dataRT[[5]]
dataBase[[3]]<-dataMonitoring[[6]]
dataBase[[4]]<- dataCheat[[6]]
dataBase[[5]]<- dataSanction[[6]]
dataBase[[6]]<- dataLog[[3]]
baseData<-finalStats_allOutputs(dataBase, seq(1,6, by=1), 2000, 50)
# add parameter name to each dataframe
mtgData<-mtgData%>%mutate(param="mtg")
costData<-costData%>%mutate(param="cost")
rtData<-rtData%>%mutate(param="rt")
logData<-logData%>%mutate(param="log")
cheatData<-cheatData%>%mutate(param="cheat")
sanctionData<-sanctionData%>%mutate(param="sanction")
monitoringData<-monitoringData%>%mutate(param="monitoring", variableValue = variableValue/100)
# combine all raw data into 1 list
dataAll = c(dataMTG, dataRT, dataMonitoring, dataCheat, dataSanction, dataLog, dataCost)
# combine all cleaned data into one dataframe
allData<-rbind(mtgData, costData, rtData, logData, cheatData, sanctionData, monitoringData)%>%mutate(param=as.factor(param))
View(monitoringData)
monitoringData<-monitoringData%>%mutate(param="monitoring", variableValue = as.factor(as.numeric(as.character(variableValue)/100)))
monitoringData<-finalStats_allOutputs(dataMonitoring, seq(0,100, by=10), 2000, 50)
monitoringData<-monitoringData%>%mutate(param="monitoring", variableValue = as.factor(as.numeric(as.character(variableValue)/100)))
monitoringData<-monitoringData%>%mutate(param="monitoring", variableValue = as.factor(as.numeric(as.character(variableValue))/100))
sanctionData<-sanctionData%>%mutate(param="sanction")
monitoringData<-monitoringData%>%mutate(param="monitoring", variableValue = as.factor(as.numeric(as.character(variableValue))/100))
# combine all raw data into 1 list
dataAll = c(dataMTG, dataRT, dataMonitoring, dataCheat, dataSanction, dataLog, dataCost)
# combine all cleaned data into one dataframe
allData<-rbind(mtgData, costData, rtData, logData, cheatData, sanctionData, monitoringData)%>%mutate(param=as.factor(param))
save(dataCost, dataMTG, dataLog, dataRT, dataCheat, dataMonitoring, dataSanction, costData, mtgData, logData, rtData, monitoringData, cheatData, sanctionData, dataBase, baseData, dataAll, allData, file = "MS_model_data.RData")
load(file = "./allData_IS/MS_model_data_clean.RData") # file loading M&S model data
View(monitoringData)
load(file = "./allData_IS/MS_model_data_clean.RData") # file loading M&S model data
load(file = "./allData_IS/MS_model_data_clean.RData") # file loading M&S model data
View(monitoringData)
monitoringData<-finalStats_allOutputs(dataMonitoring, seq(0,100, by=10), 2000, 50)
monitoringData<-finalStats_allOutputs(dataMonitoring, seq(0,100, by=10), 2000, 50)
monitoringData<-monitoringData%>%mutate(param="monitoring", variableValue = as.factor(as.numeric(as.character(variableValue))/100))
# combine all raw data into 1 list
dataAll = c(dataMTG, dataRT, dataMonitoring, dataCheat, dataSanction, dataLog, dataCost)
# combine all cleaned data into one dataframe
allData<-rbind(mtgData, costData, rtData, logData, cheatData, sanctionData, monitoringData)%>%mutate(param=as.factor(param))
save(dataCost, dataMTG, dataLog, dataRT, dataCheat, dataMonitoring, dataSanction, costData, mtgData, logData, rtData, monitoringData, cheatData, sanctionData, dataBase, baseData, dataAll, allData, file = "MS_model_data.RData")
load(file = "./allData_IS/MS_model_data_clean.RData") # file loading M&S model data
View(monitoringData)
View(allData)
# Setup default plot settings
# select sizes for text and geoms on plots
axlab_size <- 12
axtick_size <- 10
point_size = 3
line_size = 1.2
# create axes labels that are used repeatedly
ax_kf = expression(paste(bolditalic("final-institution "),bold("("), K[f], bold(")"))) # final-institutions (Kf)
axlab_bm<-"Biomass (% remaining)"
axlab_density <- "Density"
axlab_time <- "Period"
axlab_perc <- "Percent remianing"
ax_sanc = expression(bolditalic(sanction-level))
ax_mon = expression(bolditalic(monitoring-level))
ax_rt=expression(bolditalic("reference-threshold"))
ax_surveillance=expression(bold(bolditalic("surveillance-level")))
ax_mc=expression(bold(bolditalic("minimum-cut")))
ax_k=expression(paste(bold(bolditalic("current-institution ")), bold("(K)"))) # current-institution (K)
# setup theme for all graphs to follow
setGraphs<- theme_bw()+
theme(axis.text=element_text(size=axtick_size, color="black"),
axis.title=element_text(size=axlab_size,face="bold", color="black"), legend.text = element_text(size=axtick_size))+
theme(panel.border = element_blank(), axis.line = element_line(colour = "black"))
# setup color theme
color="Set2"
colorDiscrete = scale_color_brewer(palette="Set2")
colorCont = scale_color_viridis_c(option = "magma")
#fillDiscrete = scale_fill_brewer(palette="Dark2")
fillDiscrete = scale_fill_brewer(palette="Set2")
fillCont = scale_fill_viridis_c(option = "magma")
# first two colors in Dark2
#1b9e77
#d95f02
# first 3 colors in Set2 (so can be used independently for figures)
color1="#66c2a5"
color2="#fc8d62"
color3="#8da0cb"
# other good color themes
# scale_color_colorblind()
# scale_color_OkabeIto()
fig = 1 # count figure number for Rmarkdown report
View(enfData_vallino)
View(rtData_vallino)
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+(1-as.numeric(as.character(variableValue))/100), data = enfData_vallino)
vallino_lm_data = enfData_vallino%>%mutate(monLevel = (1-as.numeric(as.character(variableValue))/100))
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+monLevel, data = vallino_lm_data)
summary(vallino_lm)
View(vallino_lm_data)
View(monitoringData)
vallino_lm_data = enfData_vallino%>%mutate(monLevel = (1-as.numeric(as.character(variableValue))/100))
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+monLevel, data = vallino_lm_data)
summary(vallino_lm)
monitoring_lm = lm(TotalBM*100 ~ K+as.numeric(as.character(variableValue)), data = monitoringData)
summary(monitoring_lm)
mon_sanc_data = allData%>%filter(param == "monitoring" | param == "sanction")%>%mutate(monitoring = ifelse(param == "monitoring", as.numeric(as.character(variableValue)), 50), sanction = ifelse(param == "sanction", as.numeric(as.character(variableValue)), 5)/10 )
mon_sanc_lm = lm(TotalBM*100 ~ K + monitoring + sanction, data = mon_sanc_data)
summary(mon_sanc_lm)
mon_sanc_data = allData%>%filter(param == "monitoring" | param == "sanction")%>%mutate(monitoring = ifelse(param == "monitoring", as.numeric(as.character(variableValue)), 0.5), sanction = ifelse(param == "sanction", as.numeric(as.character(variableValue)), 5)/10 )
mon_sanc_lm = lm(TotalBM*100 ~ K + monitoring + sanction, data = mon_sanc_data)
summary(mon_sanc_lm)
#monitoring plot
viz_mon_2_8 = monitoringData%>% filter(variableValue == 20| variableValue == 80)%>%ggplot(aes(x= K, y = TotalBM*100))+
geom_point(aes(color = variableValue))+
labs(color = ax_mon)+
ylab(axlab_bm)+
xlab(ax_kf)+
setGraphs+
colorDiscrete+
#ylim(0,23)+
#xlim(7.5,15)+
theme(legend.position="bottom")
# sanctioning plot
#viz_sanc_2_8 = sanctionData%>% filter(variableValue == 2| variableValue == 8)%>%ggplot(aes(x= K, y = TotalBM*100))+
viz_sanc_2_8 = sanctionData%>% filter(variableValue == 2| variableValue == 8)%>%ggplot(aes(x= K, y = TotalBM*100))+
geom_point(aes(color = as.factor(as.numeric(as.character(variableValue))/10)))+
labs(color = ax_sanc)+
ylab(axlab_bm)+
xlab(ax_kf)+
setGraphs+
colorDiscrete+
#ylim(4,21)+
#xlim(7.5,15)+
theme(legend.position="bottom")
viz_monSanc_2_8=grid.arrange(arrangeGrob(arrangeGrob(viz_mon_2_8+ggtitle("a)"),viz_sanc_2_8+ggtitle("b)"), ncol=2, nrow=1)))
if(savePlots) ggsave("./figs/viz_monSanc.2.8.pdf", viz_monSanc_2_8, width=6, height=3, units="in")
fig = fig+1
#monitoring plot
viz_mon_2_8 = monitoringData%>% filter(variableValue == 0.2| variableValue == 0.8)%>%ggplot(aes(x= K, y = TotalBM*100))+
geom_point(aes(color = variableValue))+
labs(color = ax_mon)+
ylab(axlab_bm)+
xlab(ax_kf)+
setGraphs+
colorDiscrete+
#ylim(0,23)+
#xlim(7.5,15)+
theme(legend.position="bottom")
# sanctioning plot
#viz_sanc_2_8 = sanctionData%>% filter(variableValue == 2| variableValue == 8)%>%ggplot(aes(x= K, y = TotalBM*100))+
viz_sanc_2_8 = sanctionData%>% filter(variableValue == 2| variableValue == 8)%>%ggplot(aes(x= K, y = TotalBM*100))+
geom_point(aes(color = as.factor(as.numeric(as.character(variableValue))/10)))+
labs(color = ax_sanc)+
ylab(axlab_bm)+
xlab(ax_kf)+
setGraphs+
colorDiscrete+
#ylim(4,21)+
#xlim(7.5,15)+
theme(legend.position="bottom")
viz_monSanc_2_8=grid.arrange(arrangeGrob(arrangeGrob(viz_mon_2_8+ggtitle("a)"),viz_sanc_2_8+ggtitle("b)"), ncol=2, nrow=1)))
if(savePlots) ggsave("./figs/viz_monSanc.2.8.pdf", viz_monSanc_2_8, width=6, height=3, units="in")
fig = fig+1
savePlots
if(savePlots) ggsave("./figs/viz_monSanc.2.8.pdf", viz_monSanc_2_8, width=6.5, height=3, units="in")
# find which simulations have "met" recently
numberJumps<-findKJumps(dataBase, seq(1,6, by=1), 2000, 50)
whenFinalJump<-findFinalKJumps(dataBase, seq(1,6, by=1), 2000, 50)
numberJumps2<-numberJumps%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
jumpDF<-data.frame(jumps=numberJumps2$variableOfInterest, K=baseData$K, TotalBM=baseData$TotalBM, variableValue=baseData$variableValue, cheaters=baseData$numCheaters)
whenFinalJump2<-whenFinalJump%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
baseJumpData<-data.frame(numJumps = numberJumps2$variableOfInterest, finalJump=whenFinalJump2$variableOfInterest, K=baseData$K, TotalBM=baseData$TotalBM, variableValue=baseData$variableValue, cheaters=baseData$numCheaters)
##########################
trough= findTrough(baseJumpData$finalJump, 20, 50)
baseJumpData<- baseJumpData%>%mutate(recentMeeting = finalJump>trough)
##########################
# kBM_base_plot<-baseJumpData%>%ggplot(aes(K, TotalBM*100))+
#   geom_point(aes(color=recentMeeting))+
#   xlim(0,20)+ ylim(0,45)+
#   setGraphs+
#   scale_color_manual(labels = c("No recent meeting", "Recent meeting"), values=c(color1, color2))+
#   theme(legend.title = element_blank())+
#   labs(y=axlab_bm, x=ax_kf)+
#   guides(color = guide_legend(override.aes = list(size = 3)))
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(labels = c("< 3 meetings", "3 + meetings"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_base_plot
if(savePlots) ggsave("./figs/viz_kBM_base.pdf", kBM_base_plot, width=4.5, height=2.5, units="in")
fig = fig+1
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(labels = c("1-2", "3+"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf, color = "Number of meetings")+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_base_plot
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual("Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_base_plot
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual("Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)
kBM_base_plot
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual("Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf, color = "N")
kBM_base_plot
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual("Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf, colour = "N")
kBM_base_plot
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(name = "Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf, color = "N")
kBM_base_plot
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(name = "Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)
kBM_base_plot
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(name = "Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
labs(y=axlab_bm, x=ax_kf)
kBM_base_plot
if(savePlots) ggsave("./figs/viz_kBM_base.pdf", kBM_base_plot, width=4.5, height=2.5, units="in")
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(aes(shape=recentMeeting), position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
scale_shape(name="", breaks=c(TRUE, FALSE), labels=c("Recent meeting", "No recent meeting"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(2.5,1.5))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100), size = 1)+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(name = "Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
labs(y=axlab_bm, x=ax_kf)
kBM_base_plot
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100), size = 2)+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(name = "Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
labs(y=axlab_bm, x=ax_kf)
kBM_base_plot
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3), size = 1)+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(name = "Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
labs(y=axlab_bm, x=ax_kf)
kBM_base_plot
if(savePlots) ggsave("./figs/viz_kBM_base.pdf", kBM_base_plot, width=4.5, height=2.5, units="in")
kBM_allData_plot<-allData_plotK_BM%>%ggplot(aes(K, TotalBM*100, color=logger60))+
geom_point(size = 1)+
xlim(0,20)+ ylim(0,45)+
setGraphs +
scale_color_manual(breaks=c(TRUE, FALSE), labels = c("60 Loggers", "All other parameter sets"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
# create column for loggers == 60 for plot color
allData_plotK_BM<-allData%>%mutate(logger60= ((param=="log") & (variableValue==60)))
kBM_allData_plot<-allData_plotK_BM%>%ggplot(aes(K, TotalBM*100, color=logger60))+
geom_point(size = 1)+
xlim(0,20)+ ylim(0,45)+
setGraphs +
scale_color_manual(breaks=c(TRUE, FALSE), labels = c("60 Loggers", "All other parameter sets"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_allData_plot
#grid.arrange(kBM_allData_plot2, kBM_allData_plot)
if(savePlots) ggsave("./figs/viz_kBM_allData.pdf", kBM_allData_plot, width=5, height=2.5, units="in")
kBM_allData_plot<-allData_plotK_BM%>%ggplot(aes(K, TotalBM*100, color=logger60))+
geom_point(size = 1)+
xlim(0,20)+ ylim(0,45)+
setGraphs +
scale_color_manual(breaks=c(TRUE, FALSE), labels = c("60 Loggers", "All other parameter sets"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 1)))
kBM_allData_plot
#grid.arrange(kBM_allData_plot2, kBM_allData_plot)
if(savePlots) ggsave("./figs/viz_kBM_allData.pdf", kBM_allData_plot, width=5, height=2.5, units="in")
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3), size = 1)+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(name = "Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_base_plot
kBM_allData_plot<-allData_plotK_BM%>%ggplot(aes(K, TotalBM*100, color=logger60))+
geom_point(size = 1)+
xlim(0,20)+ ylim(0,45)+
setGraphs +
scale_color_manual(breaks=c(TRUE, FALSE), labels = c("60 Loggers", "All other parameter sets"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_allData_plot
#grid.arrange(kBM_allData_plot2, kBM_allData_plot)
if(savePlots) ggsave("./figs/viz_kBM_allData.pdf", kBM_allData_plot, width=5, height=2.5, units="in")
if(savePlots) ggsave("./figs/viz_kBM_base.pdf", kBM_base_plot, width=4.5, height=2.5, units="in")
whenFinalJump2<-whenFinalJump%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
# find which simulations have "met" recently
numberJumps<-findKJumps(dataBase, seq(1,6, by=1), 2000, 50)
whenFinalJump<-findFinalKJumps(dataBase, seq(1,6, by=1), 2000, 50)
numberJumps2<-numberJumps%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
jumpDF<-data.frame(jumps=numberJumps2$variableOfInterest, K=baseData$K, TotalBM=baseData$TotalBM, variableValue=baseData$variableValue, cheaters=baseData$numCheaters)
whenFinalJump2<-whenFinalJump%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
baseJumpData<-data.frame(numJumps = numberJumps2$variableOfInterest, finalJump=whenFinalJump2$variableOfInterest, K=baseData$K, TotalBM=baseData$TotalBM, variableValue=baseData$variableValue, cheaters=baseData$numCheaters)
##########################
trough= findTrough(baseJumpData$finalJump, 20, 50)
baseJumpData<- baseJumpData%>%mutate(recentMeeting = finalJump>trough)
##########################
# kBM_base_plot<-baseJumpData%>%ggplot(aes(K, TotalBM*100))+
#   geom_point(aes(color=recentMeeting))+
#   xlim(0,20)+ ylim(0,45)+
#   setGraphs+
#   scale_color_manual(labels = c("No recent meeting", "Recent meeting"), values=c(color1, color2))+
#   theme(legend.title = element_blank())+
#   labs(y=axlab_bm, x=ax_kf)+
#   guides(color = guide_legend(override.aes = list(size = 3)))
#this would create same graph but color based on number of meetings rather than recent meetings
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3), size = 1)+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(name = "Number of meetings", labels = c("1-2", "3+"), values=c(color1, color2))+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_base_plot
if(savePlots) ggsave("./figs/viz_kBM_base.pdf", kBM_base_plot, width=4.5, height=2.5, units="in")
fig = fig+1
#calculating number of meetings for each simulation
# find max K for each simulation
x<-maxK(dataRT, seq(1,10, by=1), 2000, 50)
#jumps_test<-findKJumps(dataRT, seq(1,10, by=1), 2000, 50)
numberJumps<-findKJumps(dataRT, seq(1,10, by=1), 2000, 50)
whenFinalJump<-findFinalKJumps(dataRT, seq(1,10, by=1), 2000, 50)
numberJumps2<-numberJumps%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
jumpDF<-data.frame(maxK=x, jumps=numberJumps2$variableOfInterest, K=rtData$K, TotalBM=rtData$TotalBM, variableValue=rtData$variableValue, cheaters=rtData$numCheaters)
whenFinalJump2<-whenFinalJump%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
rtJumpData<-data.frame(maxK=x, numJumps = numberJumps2$variableOfInterest, finalJump=whenFinalJump2$variableOfInterest, K=rtData$K, TotalBM=rtData$TotalBM, variableValue=rtData$variableValue, cheaters=rtData$numCheaters)
rtJumpData<- rtJumpData%>%mutate(recentMeeting = finalJump>20)
rtJumpData<- rtJumpData%>%mutate(jumpCat = ifelse(as.numeric(numJumps)<2,"once", ifelse(as.numeric(numJumps)<3, "twice","3+ times")))%>%mutate(jumpCat=factor(jumpCat))
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(aes(shape=recentMeeting, size=recentMeeting), position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
scale_shape(name="", breaks=c(TRUE, FALSE), labels=c("Recent meeting", "No recent meeting"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(2.5,1.5))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
viz_rt_jump
if(savePlots) ggsave("./figs/viz_rtJump.pdf", viz_rt_jump, width=5.75, height=3, units="in")
fig = fig+1
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(aes(shape=recentMeeting, size=recentMeeting), position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
viz_rt_jump
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(aes(size=recentMeeting), position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
viz_rt_jump
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(aes(size=recentMeeting), position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 2)))
viz_rt_jump
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 2)))
viz_rt_jump
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)))
viz_rt_jump
if(savePlots) ggsave("./figs/viz_rtJump.pdf", viz_rt_jump, width=5.75, height=3, units="in")
library(gridExtra)
savePlots = FALSE # determine if running this file should save new plots
knitr::opts_chunk$set(echo = FALSE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
knitr::opts_chunk$set(echo = FALSE)
#setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
library(gridExtra)
library(ggpubr)
library(colorspace)
savePlots = FALSE # determine if running this file should save new plots
source(file="dataCleaningFunctions.R") # file containing all functions needed for data cleaning process
load(file = "./allData_IS/MS_model_data_clean.RData") # file loading M&S model data
load(file = "./allData_IS/CE_model_data_clean.RData") # file loading C&E model data
endogInst_data = read.csv("./allData_IS/endogInst_model_run.csv")%>%mutate(Period = 1:2001)  # loads a single run of the Endogenous Institution model
oneThirdBmaxData = read_csv("./allData_IS/one-third-bmax.csv") # loads a single run of Endogenous Institution model with reference-threshold = 1/3 bmax
logger_removal_data = read.csv("./allData_IS/log1000.csv")%>%mutate(cummulativeCheaters=cumsum(numCheaters), period = 1:2001)# load single run of C&E model with 1000 loggers to demonstrate removal of loggers
endogInst_data = endogInst_data%>%mutate(TotalBM = TotalBM/maxBM) # convert Total BM to % remaining
maxBM = endogInst_data$TotalBM[1] # initial BM in the simulation
endogInst_data = endogInst_data%>%mutate(TotalBM = TotalBM/maxBM) # convert Total BM to % remaining
check_steadstate = endogInst_data%>%filter(Period >= 200) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period >= 20) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period > 200) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period > 20) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period > 200) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period > 20) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period > 20, Period <=200) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)

library(patchwork)
library(shinyFiles)
library(directlabels)
library(colorspace)
# setting up axes for plots - note: titles of plots based on params$report.type
ax.date = expression(atop(bold("Date"), "   "))
ax.rate= expression(atop("   ", paste(params$report.type,"Rate (%)")))
ax.patients = "Number of Patients"
ax.location = "Site"
# create variable for title of All patients plots
title.patients = ""
if(params$report.type == "Colorectal Cancer Screening"){
title.patients = "Patients 50-75 Years Old"
}else if(params$report.type == "Cervical Cancer Screening"){
title.patients = "Female Patients 21-64 Years Old"
}else if(params$report.type == "Mammogram Screening"){
title.patients = "Female Patients 50-74 Years Old"
}
# set plot options for all plots to abide by
plot_options = theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size=12),
legend.title = element_text(size=14, face = "bold"))
margin_val = 2.5
plot_colors = darken(c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
#used to run rmarkdown with parameters
rmarkdown::render("cancer_report.Rmd", params = list(
report.type = "Colorectal Cancer Screening",
rate.data = clean_data,
label.months = 3
))
#used to run rmarkdown with parameters
rmarkdown::render("rate_report.Rmd", params = list(
report.type = "Colorectal Cancer Screening",
rate.data = clean_data,
label.months = 3
))
runApp('Documents/coding_projects/dad_data_project/general-app')
test = "test"
text(test)
runApp('Documents/coding_projects/dad_data_project/general-app')
ax.rate= paste(test, expression(bold("Rate (%)")))
runApp('Documents/coding_projects/dad_data_project/general-app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
shiny::runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
loc_data
q
runApp()
runApp()
runApp()
help
help
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
View(loc_data)
help()
help
View(loc_data)
View(loc_data)
View(loc_data)
View(loc_data)
View(loc_data)
View(loc_data)
p
View(p)
print(p)
p
print(p)
any(is.na(p$data))
print(p)
save(p, "testPlot.RData")
save(p, file = "testPlot.RData")
getwd()
View(p)
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
View(p)
View(loc_data)
View(loc_data)
View(loc_data)
View(p)
View(p)
save(p, "testPlot.RData")
View(p)
p
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
View(loc_data)
View(p)
View(p)
save(p, "testPlot.RData")
View(p)
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
View(loc_data)
View(p)
View(p)
save(p, file ="testPlot.RData")
View(p)
View(p)
save(p, file ="testPlot.RData")
View(p)
save(p, file ="testPlot.RData")
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
max_patients
max_patients
View(max_patients)
View(temp_data)
View(max_range)
runApp()
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
shiny::runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/general-app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/general-app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
unit(1, "cm")
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/general-app')
runApp('Documents/coding_projects/dad_data_project/general-app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/general-app')
shiny::runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
show_col(plot_colors)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot_colors = darken(c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#F4A582" , '#e6194B', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#42d4f4', '#f032e6', '#bfef45', '#fabed4', '#469990', '#dcbeff', '#9A6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#a9a9a9', 'darkgreen', 'darkmagenta', 'aquamarine3', 'darksalmon'))
source('~/.active-rstudio-document', echo=TRUE)
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
shiny::runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
df = data.frame(x = c(1,2,3), y = c(2,5,6))
df
df$x
df$x[1]
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
max_range
head(temp_data)
y_ranges
y_ranges
y_ranges
runApp()
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/PCHS_app')
runApp('Documents/coding_projects/dad_data_project/general-app')
#setwd("~/Documents/coding_projects/IS_organized/analysis")
source(file="dataCleaningFunctions.R") # file containing all functions needed for data cleaning process
library(tidyverse)
load("./allData_IS/vallinoCorrectedData/vallinoCorrected_changeCost.RData")
vallinoCorrected_dataCost<-dataOut
load("./allData_IS/vallinoCorrectedData/vallinoCorrected_changeMTG.RData")
vallinoCorrected_dataMTG<-dataOut
load("./allData_IS/vallinoCorrectedData/vallinoCorrected_changeLog.RData")
vallinoCorrected_dataLog<-dataOut
load("./allData_IS/vallinoCorrectedData/vallinoCorrected_changeRT.RData")
vallinoCorrected_dataRT<-dataOut
load("./allData_IS/vallinoCorrectedData/vallinoCorrected_changeMonitoring.RData")
vallinoCorrected_dataEnf <-dataOut
costData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataCost, seq(0,20, by=2),  2000, 50)
mtgData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataMTG, seq(5,30, by=5), 2000, 50)
logData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataLog, seq(50,300, by=50),  2000, 50)
rtData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataRT, seq(1,10, by=1),  2000, 50)
enfData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataEnf, seq(0,100, by=10), 2000, 50)
enfData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataEnf, seq(0,100, by=10), 2000, 50)
#removedRTData_vallinoCorrected<-finalStats_allOutputs_extra(vallinoCorrected_data_removed_rt, c(50), 2000, 50)
mtgData_vallinoCorrected<-mtgData_vallinoCorrected%>%mutate(param="mtg")
costData_vallinoCorrected<-costData_vallinoCorrected%>%mutate(param="cost")
rtData_vallinoCorrected<-rtData_vallinoCorrected%>%mutate(param="rt")
logData_vallinoCorrected<-logData_vallinoCorrected%>%mutate(param="log")
enfData_vallinoCorrected<-enfData_vallinoCorrected%>%mutate(param="enf")
allData_vallinoCorrected<-rbind(mtgData_vallinoCorrected, costData_vallinoCorrected,  enfData_vallinoCorrected, rtData_vallinoCorrected)
allData_vallinoCorrected<-rbind(mtgData_vallinoCorrected, costData_vallinoCorrected, rtData_vallinoCorrected, logData_vallinoCorrected,  enfData_vallinoCorrected)
allData_vallinoCorrected<-allData_vallinoCorrected%>%mutate(param=as.factor(param))
# all simulations using base parameteres
baseData_vallinoCorrected<-allData_vallinoCorrected%>%filter((param=="cost" & variableValue==5)|(param=="mtg" & variableValue==20)|(param=="rt" & variableValue==5)|(param=="log" & variableValue==100)|(param=="enf" & variableValue==50))
save(vallinoCorrected_dataCost, vallinoCorrected_dataMTG, vallinoCorrected_dataLog, vallinoCorrected_dataRT, vallinoCorrected_dataEnf,
costData_vallinoCorrected, mtgData_vallinoCorrected, logData_vallinoCorrected, rtData_vallinoCorrected, enfData_vallinoCorrected,
baseData_vallinoCorrected, allData_vallinoCorrected, file = "CE_model_data.RData")
setwd("~/Documents/coding_projects/IS_organized/analysis")
source(file="dataCleaningFunctions.R") # file containing all functions needed for data cleaning process
library(tidyverse)
load("./allData_IS/vallinoCorrectedData/vallinoCorrected_changeCost.RData")
vallinoCorrected_dataCost<-dataOut
load("./allData_IS/vallinoCorrectedData/vallinoCorrected_changeMTG.RData")
vallinoCorrected_dataMTG<-dataOut
load("./allData_IS/vallinoCorrectedData/vallinoCorrected_changeLog.RData")
vallinoCorrected_dataLog<-dataOut
load("./allData_IS/vallinoCorrectedData/vallinoCorrected_changeRT.RData")
vallinoCorrected_dataRT<-dataOut
load("./allData_IS/vallinoCorrectedData/vallinoCorrected_changeMonitoring.RData")
vallinoCorrected_dataEnf <-dataOut
costData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataCost, seq(0,20, by=2),  2000, 50)
mtgData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataMTG, seq(5,30, by=5), 2000, 50)
logData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataLog, seq(50,300, by=50),  2000, 50)
rtData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataRT, seq(1,10, by=1),  2000, 50)
enfData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataEnf, seq(0,100, by=10), 2000, 50)
enfData_vallinoCorrected<-finalStats_allOutputs(vallinoCorrected_dataEnf, seq(0,100, by=10), 2000, 50)
#removedRTData_vallinoCorrected<-finalStats_allOutputs_extra(vallinoCorrected_data_removed_rt, c(50), 2000, 50)
mtgData_vallinoCorrected<-mtgData_vallinoCorrected%>%mutate(param="mtg")
costData_vallinoCorrected<-costData_vallinoCorrected%>%mutate(param="cost")
rtData_vallinoCorrected<-rtData_vallinoCorrected%>%mutate(param="rt")
logData_vallinoCorrected<-logData_vallinoCorrected%>%mutate(param="log")
enfData_vallinoCorrected<-enfData_vallinoCorrected%>%mutate(param="enf")
allData_vallinoCorrected<-rbind(mtgData_vallinoCorrected, costData_vallinoCorrected,  enfData_vallinoCorrected, rtData_vallinoCorrected)
allData_vallinoCorrected<-rbind(mtgData_vallinoCorrected, costData_vallinoCorrected, rtData_vallinoCorrected, logData_vallinoCorrected,  enfData_vallinoCorrected)
allData_vallinoCorrected<-allData_vallinoCorrected%>%mutate(param=as.factor(param))
# all simulations using base parameteres
baseData_vallinoCorrected<-allData_vallinoCorrected%>%filter((param=="cost" & variableValue==5)|(param=="mtg" & variableValue==20)|(param=="rt" & variableValue==5)|(param=="log" & variableValue==100)|(param=="enf" & variableValue==50))
save(vallinoCorrected_dataCost, vallinoCorrected_dataMTG, vallinoCorrected_dataLog, vallinoCorrected_dataRT, vallinoCorrected_dataEnf,
costData_vallinoCorrected, mtgData_vallinoCorrected, logData_vallinoCorrected, rtData_vallinoCorrected, enfData_vallinoCorrected,
baseData_vallinoCorrected, allData_vallinoCorrected, file = "CE_model_data.RData")
knitr::opts_chunk$set(echo = FALSE)
#setwd("~/Documents/coding_projects/IS_organized/analysis")
library(tidyverse)
library(grid)
library(gridExtra)
library(ggpubr)
library(colorspace)
library(png)
savePlots = FALSE # determine if running this file should save new plots
# Setup default plot settings
# select sizes for text and geoms on plots
axlab_size <- 12
axtick_size <- 10
point_size = 3
line_size = 1.2
# create axes labels that are used repeatedly
ax_kf = expression(paste(bolditalic("final-institution "),bold("("), K[f], bold(")"))) # final-institutions (Kf)
axlab_bm<-"Biomass (% remaining)"
axlab_density <- "Density"
axlab_time <- "Period"
axlab_perc <- "Percent remianing"
ax_sanc = expression(bolditalic(sanction-level))
ax_mon = expression(bolditalic(monitoring-level))
ax_rt=expression(bolditalic("reference-threshold"))
ax_surveillance=expression(bold(bolditalic("surveillance-level")))
ax_mc=expression(bold(bolditalic("minimum-cut")))
ax_k=expression(paste(bold(bolditalic("current-institution ")), bold("(K)"))) # current-institution (K)
# setup theme for all graphs to follow
setGraphs<- theme_bw()+
theme(axis.text=element_text(size=axtick_size, color="black"),
axis.title=element_text(size=axlab_size,face="bold", color="black"), legend.text = element_text(size=axtick_size))+
theme(panel.border = element_blank(), axis.line = element_line(colour = "black"))
# setup color theme
color="Set2"
colorDiscrete = scale_color_brewer(palette="Set2")
colorCont = scale_color_viridis_c(option = "magma")
#fillDiscrete = scale_fill_brewer(palette="Dark2")
fillDiscrete = scale_fill_brewer(palette="Set2")
fillCont = scale_fill_viridis_c(option = "magma")
# first two colors in Dark2
#1b9e77
#d95f02
# first 3 colors in Set2 (so can be used independently for figures)
color1="#66c2a5"
color2="#fc8d62"
color3="#8da0cb"
# other good color themes
# scale_color_colorblind()
# scale_color_OkabeIto()
fig = 1 # count figure number for Rmarkdown report
source(file="dataCleaningFunctions.R") # file containing all functions needed for data cleaning process
load(file = "./allData_IS/MS_model_data_clean.RData") # file loading M&S model data
load(file = "./allData_IS/CE_model_data_clean.RData") # file loading C&E model data
endogInst_data = read.csv("./allData_IS/endogInst_model_run.csv")%>%mutate(Period = 1:2001)  # loads a single run of the Endogenous Institution model
oneThirdBmaxData = read_csv("./allData_IS/one-third-bmax.csv") # loads a single run of Endogenous Institution model with reference-threshold = 1/3 bmax
logger_removal_data = read.csv("./allData_IS/log1000.csv")%>%mutate(cummulativeCheaters=cumsum(numCheaters), period = 1:2001)# load single run of C&E model with 1000 loggers to demonstrate removal of loggers
# make variable to color code exceptions to Kf = 0
allData1_vallinoCorrected<-allData_vallinoCorrected%>%mutate(categories=ifelse(variableValue==300, "log300", ifelse(param=="enf" & variableValue==100, "enf100", 0)))
viz_vallinoKf=allData1_vallinoCorrected%>%ggplot(aes(K, TotalBM*100, color=categories))+
geom_point(alpha=0.7, size=2)+
setGraphs+
labs(x=ax_kf, y=axlab_bm)+
scale_color_brewer(palette="Set2", name="test", breaks=c("log300", "enf100", "0"), labels=c(expression(paste(italic("initial-loggers"), " = 300")), expression(paste(italic("monitoring-level"), " = 0")), "All other parameter sets"))+
#colorDiscrete+
theme(legend.title=element_blank())
viz_vallinoKf
if(savePlots) ggsave("./figs/viz_vallinoKf.pdf", viz_vallinoKf, width=5.75, height=3, units="in")
fig = fig+1
# make variable to color code exceptions to Kf = 0
allData1_vallinoCorrected<-allData_vallinoCorrected%>%mutate(categories=ifelse(variableValue==300, "log300", ifelse(param=="enf" & variableValue==100, "enf100", 0)))
viz_vallinoKf=allData1_vallinoCorrected%>%ggplot(aes(K, TotalBM*100, color=param))+
geom_point(alpha=0.7, size=2)+
setGraphs+
labs(x=ax_kf, y=axlab_bm)+
#scale_color_brewer(palette="Set2", name="test", breaks=c("log300", "enf100", "0"), labels=c(expression(paste(italic("initial-loggers"), " = 300")), expression(paste(italic("monitoring-level"), " = 0")), "All other parameter sets"))+
#colorDiscrete+
theme(legend.title=element_blank())
viz_vallinoKf
if(savePlots) ggsave("./figs/viz_vallinoKf.pdf", viz_vallinoKf, width=5.75, height=3, units="in")
fig = fig+1
# make variable to color code exceptions to Kf = 0
#allData1_vallinoCorrected<-enfData_vallinoCorrected%>%mutate(categories=ifelse(variableValue==300, "log300", ifelse(param=="enf" & variableValue==100, "enf100", 0)))
viz_vallinoKf=enfData_vallinoCorrected%>%ggplot(aes(K, TotalBM*100, color=variableValue))+
geom_point(alpha=0.7, size=2)+
setGraphs+
labs(x=ax_kf, y=axlab_bm)+
#scale_color_brewer(palette="Set2", name="test", breaks=c("log300", "enf100", "0"), labels=c(expression(paste(italic("initial-loggers"), " = 300")), expression(paste(italic("monitoring-level"), " = 0")), "All other parameter sets"))+
#colorDiscrete+
theme(legend.title=element_blank())
viz_vallinoKf
if(savePlots) ggsave("./figs/viz_vallinoKf.pdf", viz_vallinoKf, width=5.75, height=3, units="in")
fig = fig+1
# make variable to color code exceptions to Kf = 0
allData1_vallino<-allData_vallino%>%mutate(categories=ifelse(variableValue==300, "log300", ifelse(param=="enf" & variableValue==100, "enf100", 0)))
viz_vallinoKf=allData1_vallino%>%ggplot(aes(K, TotalBM*100, color=categories))+
geom_point(alpha=0.7, size=2)+
setGraphs+
labs(x=ax_kf, y=axlab_bm)+
scale_color_brewer(palette="Set2", name="test", breaks=c("log300", "enf100", "0"), labels=c(expression(paste(italic("initial-loggers"), " = 300")), expression(paste(italic("monitoring-level"), " = 0")), "All other parameter sets"))+
#colorDiscrete+
theme(legend.title=element_blank())
viz_vallinoKf
if(savePlots) ggsave("./figs/viz_vallinoKf.pdf", viz_vallinoKf, width=5.75, height=3, units="in")
fig = fig+1
# make variable to color code exceptions to Kf = 0
allData1_vallino<-allData_vallino%>%mutate(categories=ifelse(variableValue==300, "log300", ifelse(param=="enf" & variableValue==100, "enf100", 0)))
viz_vallinoKf=allData1_vallino%>%ggplot(aes(K, TotalBM*100, color=categories))+
geom_point(alpha=0.7, size=2)+
setGraphs+
labs(x=ax_kf, y=axlab_bm)+
scale_color_brewer(palette="Set2", name="test", breaks=c("log300", "enf100", "0"), labels=c(expression(paste(italic("initial-loggers"), " = 300")), expression(paste(italic("monitoring-level"), " = 0")), "All other parameter sets"))+
#colorDiscrete+
theme(legend.title=element_blank())
viz_vallinoKf
if(savePlots) ggsave("./figs/viz_vallinoKf.pdf", viz_vallinoKf, width=5.75, height=3, units="in")
fig = fig+1
View(enfData_vallinoCorrected)
# make variable to color code exceptions to Kf = 0
#allData1_vallinoCorrected<-enfData_vallinoCorrected%>%mutate(categories=ifelse(variableValue==300, "log300", ifelse(param=="enf" & variableValue==100, "enf100", 0)))
enfGraphCorreted=enfData_vallinoCorrected%>%mutate(enfValue=rev(as.factor((as.numeric(variableValue)-1)/10)))
viz_vallinoKf=enfGraphCorreted%>%ggplot(aes(K, TotalBM*100, color=variableValue))+
geom_point(alpha=0.7, size=2)+
setGraphs+
labs(x=ax_kf, y=axlab_bm)+
#scale_color_brewer(palette="Set2", name="test", breaks=c("log300", "enf100", "0"), labels=c(expression(paste(italic("initial-loggers"), " = 300")), expression(paste(italic("monitoring-level"), " = 0")), "All other parameter sets"))+
#colorDiscrete+
theme(legend.title=element_blank())
viz_vallinoKf
viz_vallinoKf=enfGraphCorreted%>%ggplot(aes(K, TotalBM*100, color=enfValue))+
geom_point(alpha=0.7, size=2)+
setGraphs+
labs(x=ax_kf, y=axlab_bm)+
#scale_color_brewer(palette="Set2", name="test", breaks=c("log300", "enf100", "0"), labels=c(expression(paste(italic("initial-loggers"), " = 300")), expression(paste(italic("monitoring-level"), " = 0")), "All other parameter sets"))+
#colorDiscrete+
theme(legend.title=element_blank())
viz_vallinoKf
enfGraphCorreted=enfData_vallinoCorrected%>%mutate(enfValue=rev(as.factor((as.numeric(variableValue)-1)/10)))
viz_surv = enfGraphCorrexted%>% filter(enfValue == 0.2|enfValue == 0.8)%>%ggplot(aes(x = numLoggers*100, y = TotalBM*100))+
geom_point(aes(color = enfValue), size = 2)+
labs(color = ax_mon, x = "Loggers (% remaining)", y = axlab_bm)+
setGraphs+
colorDiscrete
viz_surv = enfGraphCorrected%>% filter(enfValue == 0.2|enfValue == 0.8)%>%ggplot(aes(x = numLoggers*100, y = TotalBM*100))+
geom_point(aes(color = enfValue), size = 2)+
labs(color = ax_mon, x = "Loggers (% remaining)", y = axlab_bm)+
setGraphs+
colorDiscrete
enfGraphCorreted=enfData_vallinoCorrected%>%mutate(enfValue=rev(as.factor((as.numeric(variableValue)-1)/10)))
viz_surv = enfGraphCorrected%>% filter(enfValue == 0.2|enfValue == 0.8)%>%ggplot(aes(x = numLoggers*100, y = TotalBM*100))+
geom_point(aes(color = enfValue), size = 2)+
labs(color = ax_mon, x = "Loggers (% remaining)", y = axlab_bm)+
setGraphs+
colorDiscrete
enfGraphCorreted=enfData_vallinoCorrected%>%mutate(enfValue=rev(as.factor((as.numeric(variableValue)-1)/10)))
viz_surv = enfGraphCorrected%>% filter(enfValue == 0.2|enfValue == 0.8)%>%ggplot(aes(x = numLoggers*100, y = TotalBM*100))+
geom_point(aes(color = enfValue), size = 2)+
labs(color = ax_mon, x = "Loggers (% remaining)", y = axlab_bm)+
setGraphs+
colorDiscrete
enfGraphCorrected=enfData_vallinoCorrected%>%mutate(enfValue=rev(as.factor((as.numeric(variableValue)-1)/10)))
viz_surv = enfGraphCorrected %>% filter(enfValue == 0.2|enfValue == 0.8)%>%ggplot(aes(x = numLoggers*100, y = TotalBM*100))+
geom_point(aes(color = enfValue), size = 2)+
labs(color = ax_mon, x = "Loggers (% remaining)", y = axlab_bm)+
setGraphs+
colorDiscrete
viz_surv
viz_surv = enfGraphCorrected %>% ggplot(aes(x = numLoggers*100, y = TotalBM*100, color = enfValue))+
geom_point(aes(color = enfValue), size = 2)+
labs(color = ax_mon, x = "Loggers (% remaining)", y = axlab_bm)+
setGraphs+
colorDiscrete
viz_surv
viz_surv = enfGraphCorrected %>% ggplot(aes(x = numLoggers*100, y = TotalBM*100, color = enfValue))+
geom_point(aes(color = enfValue), size = 2)+
labs(color = ax_mon, x = "Loggers (% remaining)", y = axlab_bm)+
setGraphs#+colorDiscrete
viz_surv
viz_surv = enfGraphCorrected %>% filter(enfValue !=0)%>%ggplot(aes(x = numLoggers*100, y = TotalBM*100, color = enfValue))+
geom_point(aes(color = enfValue), size = 2)+
labs(color = ax_mon, x = "Loggers (% remaining)", y = axlab_bm)+
setGraphs#+colorDiscrete
viz_surv
enfGraphCorrected=enfData_vallinoCorrected%>%mutate(enfValue=rev(as.factor((as.numeric(variableValue)-1)/10)))
viz_surv = enfGraphCorrected %>% filter(enfValue !=0)%>%ggplot(aes(x = numLoggers*100, y = TotalBM*100, color = enfValue))+
geom_point(aes(color = enfValue), size = 2)+
labs(color = ax_mon, x = "Loggers (% remaining)", y = axlab_bm)+
setGraphs#+colorDiscrete
viz_surv
save(vallinoCorrected_dataCost, vallinoCorrected_dataMTG, vallinoCorrected_dataLog, vallinoCorrected_dataRT, vallinoCorrected_dataEnf,
costData_vallinoCorrected, mtgData_vallinoCorrected, logData_vallinoCorrected, rtData_vallinoCorrected, enfData_vallinoCorrected,
baseData_vallinoCorrected, allData_vallinoCorrected, file = "CE_Corrected_model_data.RData")
# setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/allData_IS/vallinoData")
load("./allData_IS/vallinoData/vallino_changeCost.RData")
vallino_dataCost<-dataOut
load("./allData_IS/vallinoData/vallino_changeMTG.RData")
vallino_dataMTG<-dataOut
load("./allData_IS/vallinoData/vallino_changeLog.RData")
vallino_dataLog<-dataOut
load("./allData_IS/vallinoData/vallino_changeRT.RData")
vallino_dataRT<-dataOut
load("./allData_IS/vallinoData/vallino_changeEnf.RData")
vallino_dataEnf <-dataOut
costData_vallino<-finalStats_allOutputs(vallino_dataCost, seq(0,20, by=2),  2000, 50)
mtgData_vallino<-finalStats_allOutputs(vallino_dataMTG, seq(5,30, by=5), 2000, 50)
logData_vallino<-finalStats_allOutputs(vallino_dataLog, seq(50,300, by=50),  2000, 50)
rtData_vallino<-finalStats_allOutputs(vallino_dataRT, seq(1,10, by=1),  2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
#removedRTData_vallino<-finalStats_allOutputs_extra(vallino_data_removed_rt, c(50), 2000, 50)
mtgData_vallino<-mtgData_vallino%>%mutate(param="mtg")
costData_vallino<-costData_vallino%>%mutate(param="cost")
rtData_vallino<-rtData_vallino%>%mutate(param="rt")
logData_vallino<-logData_vallino%>%mutate(param="log")
enfData_vallino<-enfData_vallino%>%mutate(param="enf")
allData_vallino<-rbind(mtgData_vallino, costData_vallino,  enfData_vallino, rtData_vallino)
allData_vallino<-rbind(mtgData_vallino, costData_vallino, rtData_vallino, logData_vallino,  enfData_vallino)
allData_vallino<-allData_vallino%>%mutate(param=as.factor(param))
# all simulations using base parameteres
baseData_vallino<-allData_vallino%>%filter((param=="cost" & variableValue==5)|(param=="mtg" & variableValue==20)|(param=="rt" & variableValue==5)|(param=="log" & variableValue==100)|(param=="enf" & variableValue==50))
save(vallino_dataCost, vallino_dataMTG, vallino_dataLog, vallino_dataRT, vallino_dataEnf,
costData_vallino, mtgData_vallino, logData_vallino, rtData_vallino, enfData_vallino,
baseData_vallino, allData_vallino, file = "CE_model_data.RData")
load(file = "./allData_IS/CE_model_Corrected_data_clean.RData") # file loading C&E model data
load(file = "./allData_IS/CE_Corrected_model_data_clean.RData") # file loading C&E model data
vallinoCorrected_lm_data = enfData_vallinoCorrected%>%mutate(monLevel = (1-as.numeric(as.character(variableValue))/100))
vallinoCorrected_lm = lm(TotalBM*100 ~ numLoggers+K+monLevel, data = vallinoCorrected_lm_data)
summary(vallinoCorrected_lm)
vallinoCorrected_lm2 = lm(TotalBM*100 ~ numLoggers+monLevel, data = vallinoCorrected_lm_data%>%filter(monLevel != 0))
summary(vallinoCorrected_lm2)
vallinoCorrected_lm2 = lm(TotalBM*100 ~ numLoggers+K+monLevel, data = vallinoCorrected_lm_data%>%filter(monLevel != 0))
summary(vallinoCorrected_lm2)
vallinoCorrected_lm_data = enfData_vallinoCorrected%>%mutate(monLevel = (1-as.numeric(as.character(variableValue))/100), anyEnf = ifelse(monLevel!=0, TRUE, FALSE))
vallinoCorrected_lm2 = lm(TotalBM*100 ~ numLoggers+anyEnf+K+monLevel, data = vallinoCorrected_lm_data)
summary(vallinoCorrected_lm2)
vallinoCorrected_lm2 = lm(TotalBM*100 ~ numLoggers+K+anyEnf+monLevel, data = vallinoCorrected_lm_data)
summary(vallinoCorrected_lm2)
vallinoCorrected_lm = lm(TotalBM*100 ~ numLoggers+monLevel, data = vallinoCorrected_lm_data)
summary(vallinoCorrected_lm)
vallinoCorrected_lm = lm(TotalBM*100 ~ numLoggers+K+monLevel^2, data = vallinoCorrected_lm_data)
summary(vallinoCorrected_lm)
vallinoCorrected_lm_data = enfData_vallinoCorrected%>%mutate(monLevel = (1-as.numeric(as.character(variableValue))/100)^2, anyEnf = ifelse(monLevel!=0, TRUE, FALSE))
vallinoCorrected_lm = lm(TotalBM*100 ~ numLoggers+K+monLevel, data = vallinoCorrected_lm_data)
summary(vallinoCorrected_lm)
vallinoCorrected_lm = lm(TotalBM*100 ~ numLoggers*numLoggers+K+monLevel, data = vallinoCorrected_lm_data)
summary(vallinoCorrected_lm)
vallinoCorrected_lm = lm(TotalBM*100 ~ 1/numLoggers+K+monLevel, data = vallinoCorrected_lm_data)
summary(vallinoCorrected_lm)
vallinoCorrected_lm = lm(TotalBM*100 ~ numLoggers+K+monLevel, data = vallinoCorrected_lm_data)
summary(vallinoCorrected_lm)
vallinoCorrected_lm_data = enfData_vallinoCorrected%>%mutate(monLevel = (1-as.numeric(as.character(variableValue))/100), anyEnf = ifelse(monLevel!=0, TRUE, FALSE))
vallinoCorrected_lm = lm(TotalBM*100 ~ numLoggers+K+monLevel, data = vallinoCorrected_lm_data)
summary(vallinoCorrected_lm)
source('~/Documents/coding_projects/IS_organized/simulations_and_model_code/M&S_sensitivityAnalysis_FINAL.R')
source('~/Documents/coding_projects/IS_organized/simulations_and_model_code/M&S_sensitivityAnalysis_FINAL.R', echo=TRUE)
source('~/Documents/coding_projects/IS_organized/simulations_and_model_code/M&S_sensitivityAnalysis_FINAL.R', echo=TRUE)
dataLog
source('~/Documents/coding_projects/IS_organized/simulations_and_model_code/M&S_sensitivityAnalysis_FINAL.R')
source('~/Documents/coding_projects/IS_organized/simulations_and_model_code/MSrevised_mon.R', echo=TRUE)
source('~/Documents/coding_projects/IS_organized/simulations_and_model_code/MSrevised_mon.R', echo=TRUE)
source('~/Documents/coding_projects/IS_organized/simulations_and_model_code/MSrevised_mon.R', echo=TRUE)
source('~/Documents/coding_projects/IS_organized/analysis/process_m&s_corrected_data.R', echo=TRUE)
source('~/Documents/coding_projects/IS_organized/analysis/process_m&s_corrected_data.R', echo=TRUE)
source('~/Documents/coding_projects/IS_organized/analysis/process_m&s_corrected_data.R', echo=TRUE)
source('~/Documents/coding_projects/IS_organized/analysis/process_m&s_corrected_data.R', echo=TRUE)
###############################
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
source('~/Documents/coding_projects/IS_organized/analysis/process_m&s_corrected_data.R', echo=TRUE)
###############################
setwd("~/Documents/coding_projects/IS_organized/analysis")
load("./allData_IS/M&S_revised_model_data/myMod_revised_changeCost.RData")
source('~/Documents/coding_projects/IS_organized/analysis/process_m&s_corrected_data.R', echo=TRUE)

rtJumpData<- rtJumpData%>%mutate(jumpCat = ifelse(as.numeric(numJumps)<2,"once", ifelse(as.numeric(numJumps)<3, "twice","3+ times")))%>%mutate(jumpCat=factor(jumpCat))
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(aes(shape=recentMeeting, size=recentMeeting), position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
scale_shape(name="", breaks=c(TRUE, FALSE), labels=c("Recent meeting", "No recent meeting"))+
scale_size_manual(breaks=c(TRUE, FALSE), values=c(2.5,1.5))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
viz_rt_jump
if(savePlots) ggsave("./figs/viz_rtJump.pdf", viz_rt_jump, width=5.75, height=3, units="in")
fig = fig+1
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(aes(shape=recentMeeting, size=recentMeeting), position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
viz_rt_jump
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(aes(size=recentMeeting), position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
viz_rt_jump
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(aes(size=recentMeeting), position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 2)))
viz_rt_jump
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 2)))
viz_rt_jump
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)))
viz_rt_jump
if(savePlots) ggsave("./figs/viz_rtJump.pdf", viz_rt_jump, width=5.75, height=3, units="in")
library(gridExtra)
savePlots = FALSE # determine if running this file should save new plots
knitr::opts_chunk$set(echo = FALSE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
knitr::opts_chunk$set(echo = FALSE)
#setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
library(gridExtra)
library(ggpubr)
library(colorspace)
savePlots = FALSE # determine if running this file should save new plots
source(file="dataCleaningFunctions.R") # file containing all functions needed for data cleaning process
load(file = "./allData_IS/MS_model_data_clean.RData") # file loading M&S model data
load(file = "./allData_IS/CE_model_data_clean.RData") # file loading C&E model data
endogInst_data = read.csv("./allData_IS/endogInst_model_run.csv")%>%mutate(Period = 1:2001)  # loads a single run of the Endogenous Institution model
oneThirdBmaxData = read_csv("./allData_IS/one-third-bmax.csv") # loads a single run of Endogenous Institution model with reference-threshold = 1/3 bmax
logger_removal_data = read.csv("./allData_IS/log1000.csv")%>%mutate(cummulativeCheaters=cumsum(numCheaters), period = 1:2001)# load single run of C&E model with 1000 loggers to demonstrate removal of loggers
endogInst_data = endogInst_data%>%mutate(TotalBM = TotalBM/maxBM) # convert Total BM to % remaining
maxBM = endogInst_data$TotalBM[1] # initial BM in the simulation
endogInst_data = endogInst_data%>%mutate(TotalBM = TotalBM/maxBM) # convert Total BM to % remaining
check_steadstate = endogInst_data%>%filter(Period >= 200) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period >= 20) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period > 200) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period > 20) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period > 200) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period > 20) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
check_steadstate = endogInst_data%>%filter(Period > 20, Period <=200) # filter out beginning of simulation
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
mean(check_steadstate$TotalBM)
sd(check_steadstate$TotalBM)
#setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
logger_removal_data = read.csv("./allData_IS/log1000.csv")%>%mutate(cummulativeCheaters=cumsum(numCheaters), period = 1:2001)# load single run of C&E model with 1000 loggers to demonstrate removal of loggers
source(file="dataCleaningFunctions.R") # file containing all functions needed for data cleaning process
load(file = "./allData_IS/MS_model_data_clean.RData") # file loading M&S model data
load(file = "./allData_IS/CE_model_data_clean.RData") # file loading C&E model data
endogInst_data = read.csv("./allData_IS/endogInst_model_run.csv")%>%mutate(Period = 1:2001)  # loads a single run of the Endogenous Institution model
oneThirdBmaxData = read_csv("./allData_IS/one-third-bmax.csv") # loads a single run of Endogenous Institution model with reference-threshold = 1/3 bmax
logger_removal_data = read.csv("./allData_IS/log1000.csv")%>%mutate(cummulativeCheaters=cumsum(numCheaters), period = 1:2001)# load single run of C&E model with 1000 loggers to demonstrate removal of loggers
# Setup default plot settings
# select sizes for text and geoms on plots
axlab_size <- 12
axtick_size <- 10
point_size = 3
line_size = 1.2
# create axes labels that are used repeatedly
ax_kf = expression(paste(bolditalic("final-institution "),bold("("), K[f], bold(")"))) # final-institutions (Kf)
axlab_bm<-"Biomass (% remaining)"
axlab_density <- "Density"
axlab_time <- "Period"
axlab_perc <- "Percent remianing"
ax_sanc = expression(bolditalic(sanction-level))
ax_mon = expression(bolditalic(monitoring-level))
ax_rt=expression(bolditalic("reference-threshold"))
ax_surveillance=expression(bold(bolditalic("surveillance-level")))
ax_mc=expression(bold(bolditalic("minimum-cut")))
ax_k=expression(paste(bold(bolditalic("current-institution ")), bold("(K)"))) # current-institution (K)
# setup theme for all graphs to follow
setGraphs<- theme_bw()+
theme(axis.text=element_text(size=axtick_size, color="black"),
axis.title=element_text(size=axlab_size,face="bold", color="black"), legend.text = element_text(size=axtick_size))+
theme(panel.border = element_blank(), axis.line = element_line(colour = "black"))
# setup color theme
color="Set2"
colorDiscrete = scale_color_brewer(palette="Set2")
colorCont = scale_color_viridis_c(option = "magma")
#fillDiscrete = scale_fill_brewer(palette="Dark2")
fillDiscrete = scale_fill_brewer(palette="Set2")
fillCont = scale_fill_viridis_c(option = "magma")
# first two colors in Dark2
#1b9e77
#d95f02
# first 3 colors in Set2 (so can be used independently for figures)
color1="#66c2a5"
color2="#fc8d62"
color3="#8da0cb"
# other good color themes
# scale_color_colorblind()
# scale_color_OkabeIto()
fig = 1 # count figure number for Rmarkdown report
# calculate number of loggers with medium min-cut, as well as who has changed min cut within last 30 periods
mincut_bravo30 = endogInst_run_data%>%mutate(midMC = 100 - lowMinCut - highMinCut, midMC30 = loggers30Periods - highMC30Periods - lowMC30Periods, highMC = highMinCut, lowMC = lowMinCut)
instChange = 15 # to make verticle line where institution changes (15 is for this specific simulation run. may be different for a different simulation run)
maxBM = endogInst_data$TotalBM[1] # initial BM in the simulation
endogInst_data = endogInst_data%>%mutate(TotalBM = TotalBM/maxBM) # convert Total BM to % remaining
endogInst_run_data = endogInst_data%>%filter(Period <= 200) # filter out beginning of simulation
# plot of K
v1b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=K),  size=line_size)+
labs(x=element_blank(), y=ax_k)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
ylim(0,20)+
setGraphs
# plot of average minimal-cut
ax = expression(bold(paste("Avg. ", bolditalic("minimal-cut"))))
v2b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=k.i),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x=element_blank(), y=ax)+
ylim(0,20)+
setGraphs
# plot of average reference-trees
ax = expression(bold(paste("Avg. ", bolditalic("reference-trees"))))
v3b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=beta.i),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x="", y=ax)+
ylim(0,1)+
setGraphs
# plot of BM%
v4b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=TotalBM*100),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x="", y=axlab_bm)+
ylim(0,100)+
setGraphs
# join plots into one figure
viz_bravo=grid.arrange(v1b+ggtitle("a)"), v2b+ggtitle("b)"), v4b+ggtitle("c)"), v3b+ggtitle("d)"), nrow=2)
knitr::opts_chunk$set(echo = FALSE)
#setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
library(gridExtra)
library(ggpubr)
library(colorspace)
savePlots = FALSE # determine if running this file should save new plots
instChange = 15 # to make verticle line where institution changes (15 is for this specific simulation run. may be different for a different simulation run)
maxBM = endogInst_data$TotalBM[1] # initial BM in the simulation
endogInst_data = endogInst_data%>%mutate(TotalBM = TotalBM/maxBM) # convert Total BM to % remaining
endogInst_run_data = endogInst_data%>%filter(Period <= 200) # filter out beginning of simulation
# plot of K
v1b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=K),  size=line_size)+
labs(x=element_blank(), y=ax_k)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
ylim(0,20)+
setGraphs
# plot of average minimal-cut
ax = expression(bold(paste("Avg. ", bolditalic("minimal-cut"))))
v2b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=k.i),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x=element_blank(), y=ax)+
ylim(0,20)+
setGraphs
# plot of average reference-trees
ax = expression(bold(paste("Avg. ", bolditalic("reference-trees"))))
v3b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=beta.i),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x="", y=ax)+
ylim(0,1)+
setGraphs
# plot of BM%
v4b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=TotalBM*100),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x="", y=axlab_bm)+
ylim(0,100)+
setGraphs
# join plots into one figure
viz_bravo=grid.arrange(v1b+ggtitle("a)"), v2b+ggtitle("b)"), v4b+ggtitle("c)"), v3b+ggtitle("d)"), nrow=2)
viz_bravo=annotate_figure(viz_bravo,
bottom = text_grob(expression(bold(Period)), vjust = 0,  size = axlab_size),
)
if(savePlots) ggsave("./figs/viz_bravo2.pdf", viz_bravo, width=5.75, height=4, units="in")
fig = fig+1
endogInst_run_data$K
endogInst_run_data$Period
endogInst_run_data$K
endogInst_run_data$Period
endogInst_run_data$K
endogInst_run_data$Period
endogInst_run_data$TotalBM
instChange = 21 # to make verticle line where institution changes (15 is for this specific simulation run. may be different for a different simulation run)
instChange = 21 # to make verticle line where institution changes (15 is for this specific simulation run. may be different for a different simulation run)
maxBM = endogInst_data$TotalBM[1] # initial BM in the simulation
endogInst_data = endogInst_data%>%mutate(TotalBM = TotalBM/maxBM) # convert Total BM to % remaining
endogInst_run_data = endogInst_data%>%filter(Period <= 200) # filter out beginning of simulation
# plot of K
v1b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=K),  size=line_size)+
labs(x=element_blank(), y=ax_k)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
ylim(0,20)+
setGraphs
# plot of average minimal-cut
ax = expression(bold(paste("Avg. ", bolditalic("minimal-cut"))))
v2b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=k.i),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x=element_blank(), y=ax)+
ylim(0,20)+
setGraphs
# plot of average reference-trees
ax = expression(bold(paste("Avg. ", bolditalic("reference-trees"))))
v3b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=beta.i),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x="", y=ax)+
ylim(0,1)+
setGraphs
# plot of BM%
v4b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=TotalBM*100),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x="", y=axlab_bm)+
ylim(0,100)+
setGraphs
# join plots into one figure
viz_bravo=grid.arrange(v1b+ggtitle("a)"), v2b+ggtitle("b)"), v4b+ggtitle("c)"), v3b+ggtitle("d)"), nrow=2)
viz_bravo=annotate_figure(viz_bravo,
bottom = text_grob(expression(bold(Period)), vjust = 0,  size = axlab_size),
)
if(savePlots) ggsave("./figs/viz_bravo2.pdf", viz_bravo, width=5.75, height=4, units="in")
fig = fig+1
endogInst_run_data$K
endogInst_run_data$Period
endogInst_run_data$TotalBM
instChange = 17 # to make verticle line where institution changes (15 is for this specific simulation run. may be different for a different simulation run)
maxBM = endogInst_data$TotalBM[1] # initial BM in the simulation
endogInst_data = endogInst_data%>%mutate(TotalBM = TotalBM/maxBM) # convert Total BM to % remaining
endogInst_run_data = endogInst_data%>%filter(Period <= 200) # filter out beginning of simulation
# plot of K
v1b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=K),  size=line_size)+
labs(x=element_blank(), y=ax_k)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
ylim(0,20)+
setGraphs
# plot of average minimal-cut
ax = expression(bold(paste("Avg. ", bolditalic("minimal-cut"))))
v2b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=k.i),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x=element_blank(), y=ax)+
ylim(0,20)+
setGraphs
# plot of average reference-trees
ax = expression(bold(paste("Avg. ", bolditalic("reference-trees"))))
v3b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=beta.i),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x="", y=ax)+
ylim(0,1)+
setGraphs
# plot of BM%
v4b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=TotalBM*100),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x="", y=axlab_bm)+
ylim(0,100)+
setGraphs
# join plots into one figure
viz_bravo=grid.arrange(v1b+ggtitle("a)"), v2b+ggtitle("b)"), v4b+ggtitle("c)"), v3b+ggtitle("d)"), nrow=2)
viz_bravo=annotate_figure(viz_bravo,
bottom = text_grob(expression(bold(Period)), vjust = 0,  size = axlab_size),
)
if(savePlots) ggsave("./figs/viz_bravo2.pdf", viz_bravo, width=5.75, height=4, units="in")
fig = fig+1
ggsave("./figs/viz_bravo2.pdf", viz_bravo, width=5.75, height=4, units="in")
# create column for loggers == 60 for plot color
allData_plotK_BM<-allData%>%mutate(logger60= ((param=="log") & (variableValue==60)))
kBM_allData_plot<-allData_plotK_BM%>%ggplot(aes(K, TotalBM*100, color=logger60))+
geom_point(size = 1)+
xlim(0,20)+ ylim(0,45)+
setGraphs +
scale_color_manual(breaks=c(TRUE, FALSE), labels = c("60 Loggers", "All other parameter sets"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_allData_plot
#grid.arrange(kBM_allData_plot2, kBM_allData_plot)
if(savePlots) ggsave("./figs/viz_kBM_allData.pdf", kBM_allData_plot, width=5, height=2.5, units="in")
fig = fig + 1
#monitoring plot
viz_mon_2_8 = monitoringData%>% filter(variableValue == 0.2| variableValue == 0.8)%>%ggplot(aes(x= K, y = TotalBM*100))+
geom_point(aes(color = variableValue))+
labs(color = ax_mon)+
ylab(axlab_bm)+
xlab(ax_kf)+
setGraphs+
colorDiscrete+
#ylim(0,23)+
#xlim(7.5,15)+
theme(legend.position="bottom")
# sanctioning plot
#viz_sanc_2_8 = sanctionData%>% filter(variableValue == 2| variableValue == 8)%>%ggplot(aes(x= K, y = TotalBM*100))+
viz_sanc_2_8 = sanctionData%>% filter(variableValue == 2| variableValue == 8)%>%ggplot(aes(x= K, y = TotalBM*100))+
geom_point(aes(color = as.factor(as.numeric(as.character(variableValue))/10)))+
labs(color = ax_sanc)+
ylab(axlab_bm)+
xlab(ax_kf)+
setGraphs+
colorDiscrete+
#ylim(4,21)+
#xlim(7.5,15)+
theme(legend.position="bottom")
viz_monSanc_2_8=grid.arrange(arrangeGrob(arrangeGrob(viz_mon_2_8+ggtitle("a)"),viz_sanc_2_8+ggtitle("b)"), ncol=2, nrow=1)))
if(savePlots) ggsave("./figs/viz_monSanc.2.8.pdf", viz_monSanc_2_8, width=6.5, height=3, units="in")
fig = fig+1
# with recent meetings
# viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
#   geom_point(aes(shape=recentMeeting, size=recentMeeting), position="jitter")+
#   geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
#   scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
#   scale_shape(name="", breaks=c(TRUE, FALSE), labels=c("Recent meeting", "No recent meeting"))+
#   scale_size_manual(breaks=c(TRUE, FALSE), values=c(2.5,1.5))+
#   labs(x=ax_rt, y=ax_kf)+
#   setGraphs+
#   guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)))
#calculating number of meetings for each simulation
# find max K for each simulation
x<-maxK(dataRT, seq(1,10, by=1), 2000, 50)
#jumps_test<-findKJumps(dataRT, seq(1,10, by=1), 2000, 50)
numberJumps<-findKJumps(dataRT, seq(1,10, by=1), 2000, 50)
whenFinalJump<-findFinalKJumps(dataRT, seq(1,10, by=1), 2000, 50)
numberJumps2<-numberJumps%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
jumpDF<-data.frame(maxK=x, jumps=numberJumps2$variableOfInterest, K=rtData$K, TotalBM=rtData$TotalBM, variableValue=rtData$variableValue, cheaters=rtData$numCheaters)
whenFinalJump2<-whenFinalJump%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
rtJumpData<-data.frame(maxK=x, numJumps = numberJumps2$variableOfInterest, finalJump=whenFinalJump2$variableOfInterest, K=rtData$K, TotalBM=rtData$TotalBM, variableValue=rtData$variableValue, cheaters=rtData$numCheaters)
rtJumpData<- rtJumpData%>%mutate(recentMeeting = finalJump>20)
rtJumpData<- rtJumpData%>%mutate(jumpCat = ifelse(as.numeric(numJumps)<2,"once", ifelse(as.numeric(numJumps)<3, "twice","3+ times")))%>%mutate(jumpCat=factor(jumpCat))
# with recent meetings
# viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
#   geom_point(aes(shape=recentMeeting, size=recentMeeting), position="jitter")+
#   geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
#   scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
#   scale_shape(name="", breaks=c(TRUE, FALSE), labels=c("Recent meeting", "No recent meeting"))+
#   scale_size_manual(breaks=c(TRUE, FALSE), values=c(2.5,1.5))+
#   labs(x=ax_rt, y=ax_kf)+
#   setGraphs+
#   guides(color = guide_legend(override.aes = list(size = 3)), shape = guide_legend(override.aes = list(size = 3)), size=FALSE)
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(position="jitter")+
geom_smooth(method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)))
viz_rt_jump
if(savePlots) ggsave("./figs/viz_rtJump.pdf", viz_rt_jump, width=5.75, height=3, units="in")
fig = fig+1
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(position="jitter")+
geom_smooth(rtJumpData%>%filter(jumpCat !=1), method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)))
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(position="jitter")+
geom_smooth(data = rtJumpData%>%filter(jumpCat !=1), method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)))
viz_rt_jump
View(rtJumpData)
# no recent meetings
viz_rt_jump=rtJumpData%>%ggplot(aes(x = as.numeric(variableValue)/10, y = K, color=jumpCat))+
geom_point(position="jitter")+
geom_smooth(data = rtJumpData%>%filter(jumpCat !="once"), method='lm', se = FALSE, show.legend = FALSE)+
scale_color_brewer(palette="Set2",breaks=c("once", "twice", "3+ times"),name="Number of meetings", labels = c("1", "2", "3+"))+
labs(x=ax_rt, y=ax_kf)+
setGraphs+
guides(color = guide_legend(override.aes = list(size = 3)))
viz_rt_jump
ggsave("./figs/viz_rtJump_removeRedRegression.pdf", viz_rt_jump, width=5.75, height=3, units="in")
s1 = readPNG("./figs/screenshot_beginning.png")
library(png)
install.packages("png")
library(png)
s1 = readPNG("./figs/screenshot_beginning.png")
s_end = readPNG("./figs/screenshot_end.png")
s_start = readPNG("./figs/screenshot_beginning.png")
grid.arrange(arrangeGrob(arrangeGrob(s_start+ggtitle("a)"),s_end+ggtitle("b)"), ncol=2, nrow=1)))
s_start = readPNG("./figs/screenshot_beginning.png")%>%rasterGrob()
?rasterGrob
library(grid)
s_start = readPNG("./figs/screenshot_beginning.png")%>%rasterGrob()
s_end = readPNG("./figs/screenshot_end.png")%>%rasterGrob()
grid.arrange(arrangeGrob(arrangeGrob(s_start+ggtitle("a)"),s_end+ggtitle("b)"), ncol=2, nrow=1)))
grid.arrange(s_start, s_end)
ggplot()+geom_blank()
ggplot()+geom_blank()+theme_classic()
ggplot()+theme_void()
grid.arrange(s_start, ggplot()+theme_void()+ ggtitle("a)"), s_end)
grid.arrange(ggplot()+theme_void()+ ggtitle("a)"), s_start, ggplot()+theme_void()+ ggtitle("b)"), s_end)
void = ggplot()+theme_void()+theme(plot.margin = margin(0, 10, 0, 10))
grid.arrange(void+ ggtitle("a)"), s_start, ggplot()+theme_void()+ ggtitle("b)"), s_end)
void = ggplot()+theme_void()+theme(plot.margin = margin(0, 0, 0, 0))
grid.arrange(void+ ggtitle("a)"), s_start, ggplot()+theme_void()+ ggtitle("b)"), s_end)
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end)
grid.arrange(arrangeGrob(arrangeGrob(+ggtitle("a)"),s_end+ggtitle("b)"), ncol=2, nrow=1, widths = 1:100)))
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end, widths = 1:100)
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end, ncol=2, widths = 1:100)
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,100))
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,2))
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10000))
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10))
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10, 1, 10))
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10, 1, 10), height = c(1, 10, 1, 10))
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10, 1, 10), height = c(1, 10, 1, 10)))
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10, 1, 10), heights = c(1, 10, 1, 10))
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10, 1, 10)
c
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10, 1, 10))
if(savePlots) ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=2, units="in")
ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=2, units="in")
screenshots = grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10, 1, 10))
ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=2, units="in")
grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,20, 1, 20))
if(savePlots) ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=2, units="in")
screenshots = grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10, 1, 10))
if(savePlots) ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=2, units="in")
if(savePlots) ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=3, units="in")
ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=3, units="in")
screenshots = grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10, 1, 10), ncols = 2)
screenshots = grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,, ncols = 2, widths = c(1,10))
screenshots = grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end, ncols = 2, widths = c(1,10))
screenshots = grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10))
screenshots = grid.arrange(void+ ggtitle("a)"), s_start, void+ ggtitle("b)"), s_end,widths = c(1,10, 1, 10))
ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=3, units="in")
if(savePlots) ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=4, units="in")
ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=4, units="in")
ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=3.5, units="in")
ggsave("./figs/screenshots.pdf", screenshots, width=5.75, height=3.25, units="in")

<<<<<<< HEAD
}
# convert raw data to end-of-simulation summary statistics
costData<-finalStats_allOutputs(dataCost, seq(0,20, by=2),  2000, 50)
source(file="dataCleaningFunctions.R")
source(file = "process_m&s_data.R")
source(file="process_c&e_data.R")
view(monitoringData)
endogInst_data = read.csv("./allData_IS/endogInst_data_7_18.csv")
endogInst_data = endogInst_data%>%mutate(Period = 1:2001)
instChange = 15
maxBM = endogInst_data$TotalBM[1]
endogInst_data = endogInst_data%>%mutate(TotalBM = TotalBM/maxBM)
endogInst_run_data = endogInst_data%>%filter(Period <= 200)
#ax_k = expression(paste(bolditalic("current-institution")))
v1b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=K),  size=line_size)+
labs(x=element_blank(), y=ax_k)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
ylim(0,20)+
setGraphs
ax = expression(bold(paste("Avg. ", bolditalic("minimal-cut"))))
v2b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=k.i),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x=element_blank(), y=ax)+
ylim(0,20)+
setGraphs
ax = expression(bold(paste("Avg. ", bolditalic("reference-trees"))))
v3b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=beta.i),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x="", y=ax)+
ylim(0,1)+
setGraphs
v4b<-endogInst_run_data%>%ggplot(aes(x=Period))+
geom_path(aes(y=TotalBM*100),  size=line_size)+
geom_vline(xintercept = instChange, linetype="dashed", color="dimgrey")+
labs(x="", y=axlab_bm)+
ylim(0,100)+
setGraphs
viz_bravo=grid.arrange(v1b+ggtitle("a)"), v2b+ggtitle("b)"), v4b+ggtitle("c)"), v3b+ggtitle("d)"), nrow=2)
viz_bravo=annotate_figure(viz_bravo,
bottom = text_grob(expression(bold(Period)), vjust = 0,  size = axlab_size),
)
ggsave("./figs/viz_bravo2.pdf", viz_bravo, width=5.75, height=4, units="in")
endogInst_data = read.csv("./allData_IS/endogInst_data_7_18.csv")%>%mutate(Period = 1:2001)  # loads a single run of the Endogenous Institution model
mincut_bravo30 = endogInst_run_data%>%mutate(midMC = 100 - lowMinCut - highMinCut, midMC30 = loggers30Periods - highMC30Periods - lowMC30Periods, highMC = highMinCut, lowMC = lowMinCut)
mincut_bravo30 = mincut_bravo30%>%mutate(new_midMC = midMC-midMC30, new_highMC = highMinCut - highMC30Periods, new_lowMC = lowMinCut - lowMC30Periods)
mincut_bravo30 = mincut_bravo30%>%gather(key = "MC.level", value = "NumLogMC", c(highMC, lowMC, midMC30, new_midMC))%>%select(Period, MC.level, NumLogMC)
levels(mincut_bravo30$MC.level)
mincut_bravo30$MC.level <- ordered(mincut_bravo30$MC.level, levels = c("midMC30","new_midMC","highMC", "lowMC"))
labelHigh = expression(paste("High (", italic("minimal-cut"), " > 18)"))
labelLow = expression(paste("Low (", italic("minimal-cut"), " < 2)"))
# USING THIS IN PAPER FOR THE MOMENT
viz_minCutBravo = mincut_bravo30%>%ggplot(aes(x = Period, y = NumLogMC))+
geom_area(aes(fill = MC.level), size = line_size, alpha = 0.8)+
labs(y = "Loggers (% of Total)")+
setGraphs+
scale_fill_manual(breaks=c("new_midMC", "highMC", "lowMC"),name=ax_mc, labels = c("Not polarized", "High (> 18)", "Low (< 2)"), values = c(lighten(color3, amount = 0.3), color3, color1, color2))+
theme(legend.text.align = 0)
# test = endogInst_run_data%>%mutate(period = 1:200, midMC = 100 - lowMinCut - highMinCut, midMC30 = loggers30Periods - highMC30Periods - lowMC30Periods, highMC = highMinCut, lowMC = lowMinCut)
# test%>%filter(period > 30)%>%summarize(median(midMC30))
ggsave("./figs/viz_mcPolarization_bravo.pdf", viz_minCutBravo, width=5.75, height=3, units="in")
viz_minCutBravo
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
library(gridExtra)
library(ggpubr)
library(colorspace)
savePlot = FALSE # determine if running this file should save new plots
if(savePlots) ggsave("./figs/viz_bravo2.pdf", viz_bravo, width=5.75, height=4, units="in")
savePlot = FALSE # determine if running this file should save new plots
if(savePlots) ggsave("./figs/viz_bravo2.pdf", viz_bravo, width=5.75, height=4, units="in")
savePlots = FALSE # determine if running this file should save new plots
if(savePlots) ggsave("./figs/viz_bravo2.pdf", viz_bravo, width=5.75, height=4, units="in")
knitr::opts_chunk$set(echo = FALSE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
library(gridExtra)
library(ggpubr)
library(colorspace)
savePlots = FALSE # determine if running this file should save new plots
numberJumps<-findKJumps(dataBase, seq(1,6, by=1), 2000, 50)
whenFinalJump<-findFinalKJumps(dataBase, seq(1,6, by=1), 2000, 50)
numberJumps2<-numberJumps%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
jumpDF<-data.frame(jumps=numberJumps2$variableOfInterest, K=baseData$K, TotalBM=baseData$TotalBM, variableValue=baseData$variableValue, cheaters=baseData$numCheaters)
whenFinalJump2<-whenFinalJump%>%gather(key="variableValue", value=variableOfInterest)%>%separate(col = variableValue, into = c("type", "variableValue"))
baseJumpData<-data.frame(numJumps = numberJumps2$variableOfInterest, finalJump=whenFinalJump2$variableOfInterest, K=baseData$K, TotalBM=baseData$TotalBM, variableValue=baseData$variableValue, cheaters=baseData$numCheaters)
##########################
trough= findTrough(baseJumpData$finalJump, 20, 50)
baseJumpData<- baseJumpData%>%mutate(recentMeeting = finalJump>trough)
##########################
allData_plotK_BM<-allData%>%mutate(logger60= ((param=="log") & (variableValue==60)))
kBM_base_plot<-baseJumpData%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=recentMeeting))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(labels = c("No recent meeting", "Recent meeting"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_base_plot
if(savePlots) ggsave("./figs/viz_kBM_base.pdf", kBM_base_plot, width=4.5, height=2.5, units="in")
fig = fig+1
jumpDF<-data.frame(jumps=numberJumps2$variableOfInterest, K=baseData$K, TotalBM=baseData$TotalBM, variableValue=baseData$variableValue, cheaters=baseData$numCheaters)
view(jumpDF)
view(jumpDF)
kBM_base_plot<-jumpDF%>%ggplot(aes(K, TotalBM*100))+
geom_point(aes(color=jumps > 3))+
xlim(0,20)+ ylim(0,45)+
setGraphs+
scale_color_manual(labels = c("No recent meeting", "Recent meeting"), values=c(color1, color2))+
theme(legend.title = element_blank())+
labs(y=axlab_bm, x=ax_kf)+
guides(color = guide_legend(override.aes = list(size = 3)))
kBM_base_plot
x = lm(rtJumpData$K~ as.numeric(rtJumpData$variableValue))
summary(x)
install.packages("tictoc")
#remove(JGR)
#install.packages("JGR")
Sys.setenv(NOAWT=1)
library(JGR)
Sys.unsetenv("NOAWT")
JGR()
save(dataCost, dataMTG, dataLog, dataRT, dataCheat, dataMonitoring, dataSanction, costData, mtgData, logData, rtData, monitoringData, cheatData, sanctionData, dataBase, baseData, dataAll, allData, file = "MS_model_data.RData")
save(vallino_dataCost, vallino_dataMTG, vallino_dataLog, vallino_dataRT, vallino_dataCheat, vallino_dataMonitoring, vallino_dataSanction,
costData_vallino, mtgData_vallino, logData_vallino, rtData_vallino, monitoringData_vallino, cheatData_vallino, sanctionData_vallino,
vallino_dataBase, baseData_vallino, vallino_dataAll, allData_vallino, file = "MS_model_data.RData")
# setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/allData_IS/vallinoData")
load("./allData_IS/vallinoData/vallino_changeCost.RData")
vallino_dataCost<-dataOut
load("./allData_IS/vallinoData/vallino_changeMTG.RData")
vallino_dataMTG<-dataOut
load("./allData_IS/vallinoData/vallino_changeLog.RData")
vallino_dataLog<-dataOut
load("./allData_IS/vallinoData/vallino_changeRT.RData")
vallino_dataRT<-dataOut
load("./allData_IS/vallinoData/vallino_changeEnf.RData")
vallino_dataEnf <-dataOut
costData_vallino<-finalStats_allOutputs(vallino_dataCost, seq(0,20, by=2),  2000, 50)
mtgData_vallino<-finalStats_allOutputs(vallino_dataMTG, seq(5,30, by=5), 2000, 50)
logData_vallino<-finalStats_allOutputs(vallino_dataLog, seq(50,300, by=50),  2000, 50)
rtData_vallino<-finalStats_allOutputs(vallino_dataRT, seq(1,10, by=1),  2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
#removedRTData_vallino<-finalStats_allOutputs_extra(vallino_data_removed_rt, c(50), 2000, 50)
mtgData_vallino<-mtgData_vallino%>%mutate(param="mtg")
costData_vallino<-costData_vallino%>%mutate(param="cost")
rtData_vallino<-rtData_vallino%>%mutate(param="rt")
logData_vallino<-logData_vallino%>%mutate(param="log")
enfData_vallino<-enfData_vallino%>%mutate(param="enf")
allData_vallino<-rbind(mtgData_vallino, costData_vallino,  enfData_vallino, rtData_vallino)
allData_vallino<-rbind(mtgData_vallino, costData_vallino, rtData_vallino, logData_vallino,  enfData_vallino)
allData_vallino<-allData_vallino%>%mutate(param=as.factor(param))
# all simulations using base parameteres
baseData_vallino<-allData_vallino%>%filter((param=="cost" & variableValue==5)|(param=="mtg" & variableValue==20)|(param=="rt" & variableValue==5)|(param=="log" & variableValue==100)|(param=="enf" & variableValue==50))
save(vallino_dataCost, vallino_dataMTG, vallino_dataLog, vallino_dataRT, vallino_dataCheat, vallino_dataMonitoring, vallino_dataSanction,
costData_vallino, mtgData_vallino, logData_vallino, rtData_vallino, monitoringData_vallino, cheatData_vallino, sanctionData_vallino,
vallino_dataBase, baseData_vallino, vallino_dataAll, allData_vallino, file = "MS_model_data.RData")
save(vallino_dataCost, vallino_dataMTG, vallino_dataLog, vallino_dataRT, vallino_dataEnf,
costData_vallino, mtgData_vallino, logData_vallino, rtData_vallino, enfData_vallino,
vallino_dataBase, baseData_vallino, vallino_dataAll, allData_vallino, file = "MS_model_data.RData")
save(vallino_dataCost, vallino_dataMTG, vallino_dataLog, vallino_dataRT, vallino_dataEnf,
costData_vallino, mtgData_vallino, logData_vallino, rtData_vallino, enfData_vallino,
vallino_dataBase, baseData_vallino, vallino_dataAll, allData_vallino, file = "MS_model_data.RData")
# setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/allData_IS/vallinoData")
load("./allData_IS/vallinoData/vallino_changeCost.RData")
vallino_dataCost<-dataOut
load("./allData_IS/vallinoData/vallino_changeMTG.RData")
vallino_dataMTG<-dataOut
load("./allData_IS/vallinoData/vallino_changeLog.RData")
vallino_dataLog<-dataOut
load("./allData_IS/vallinoData/vallino_changeRT.RData")
vallino_dataRT<-dataOut
load("./allData_IS/vallinoData/vallino_changeEnf.RData")
vallino_dataEnf <-dataOut
costData_vallino<-finalStats_allOutputs(vallino_dataCost, seq(0,20, by=2),  2000, 50)
mtgData_vallino<-finalStats_allOutputs(vallino_dataMTG, seq(5,30, by=5), 2000, 50)
logData_vallino<-finalStats_allOutputs(vallino_dataLog, seq(50,300, by=50),  2000, 50)
rtData_vallino<-finalStats_allOutputs(vallino_dataRT, seq(1,10, by=1),  2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
#removedRTData_vallino<-finalStats_allOutputs_extra(vallino_data_removed_rt, c(50), 2000, 50)
mtgData_vallino<-mtgData_vallino%>%mutate(param="mtg")
costData_vallino<-costData_vallino%>%mutate(param="cost")
rtData_vallino<-rtData_vallino%>%mutate(param="rt")
logData_vallino<-logData_vallino%>%mutate(param="log")
enfData_vallino<-enfData_vallino%>%mutate(param="enf")
allData_vallino<-rbind(mtgData_vallino, costData_vallino,  enfData_vallino, rtData_vallino)
allData_vallino<-rbind(mtgData_vallino, costData_vallino, rtData_vallino, logData_vallino,  enfData_vallino)
allData_vallino<-allData_vallino%>%mutate(param=as.factor(param))
# all simulations using base parameteres
baseData_vallino<-allData_vallino%>%filter((param=="cost" & variableValue==5)|(param=="mtg" & variableValue==20)|(param=="rt" & variableValue==5)|(param=="log" & variableValue==100)|(param=="enf" & variableValue==50))
save(vallino_dataCost, vallino_dataMTG, vallino_dataLog, vallino_dataRT, vallino_dataEnf,
costData_vallino, mtgData_vallino, logData_vallino, rtData_vallino, enfData_vallino,
vallino_dataBase, baseData_vallino, vallino_dataAll, allData_vallino, file = "MS_model_data.RData")
load("./allData_IS/vallinoData/vallino_changeCost.RData")
vallino_dataCost<-dataOut
load("./allData_IS/vallinoData/vallino_changeMTG.RData")
vallino_dataMTG<-dataOut
load("./allData_IS/vallinoData/vallino_changeLog.RData")
vallino_dataLog<-dataOut
load("./allData_IS/vallinoData/vallino_changeRT.RData")
vallino_dataRT<-dataOut
load("./allData_IS/vallinoData/vallino_changeEnf.RData")
vallino_dataEnf <-dataOut
costData_vallino<-finalStats_allOutputs(vallino_dataCost, seq(0,20, by=2),  2000, 50)
mtgData_vallino<-finalStats_allOutputs(vallino_dataMTG, seq(5,30, by=5), 2000, 50)
logData_vallino<-finalStats_allOutputs(vallino_dataLog, seq(50,300, by=50),  2000, 50)
rtData_vallino<-finalStats_allOutputs(vallino_dataRT, seq(1,10, by=1),  2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
mtgData_vallino<-mtgData_vallino%>%mutate(param="mtg")
costData_vallino<-costData_vallino%>%mutate(param="cost")
rtData_vallino<-rtData_vallino%>%mutate(param="rt")
logData_vallino<-logData_vallino%>%mutate(param="log")
enfData_vallino<-enfData_vallino%>%mutate(param="enf")
allData_vallino<-rbind(mtgData_vallino, costData_vallino,  enfData_vallino, rtData_vallino)
allData_vallino<-rbind(mtgData_vallino, costData_vallino, rtData_vallino, logData_vallino,  enfData_vallino)
allData_vallino<-allData_vallino%>%mutate(param=as.factor(param))
# all simulations using base parameteres
baseData_vallino<-allData_vallino%>%filter((param=="cost" & variableValue==5)|(param=="mtg" & variableValue==20)|(param=="rt" & variableValue==5)|(param=="log" & variableValue==100)|(param=="enf" & variableValue==50))
save(vallino_dataCost, vallino_dataMTG, vallino_dataLog, vallino_dataRT, vallino_dataEnf,
costData_vallino, mtgData_vallino, logData_vallino, rtData_vallino, enfData_vallino,
vallino_dataBase, baseData_vallino, vallino_dataAll, allData_vallino, file = "CE_model_data.RData")
save(vallino_dataCost, vallino_dataMTG, vallino_dataLog, vallino_dataRT, vallino_dataEnf,
costData_vallino, mtgData_vallino, logData_vallino, rtData_vallino, enfData_vallino,
baseData_vallino, allData_vallino, file = "CE_model_data.RData")
load(file = "MS_model_data.RData") # file loading and cleaning M&S model data
load(file = "./allData_IS/MS_model_data_clean.RData") # file loading M&S model data
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/IS_analysis")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
source(file="setupFile2.R")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/IS_analysis")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
source(file="setupFile2.R")
getwd()
source(file="./IS_analysis/setupFile2.R")
source(file="./IS_analysis/setupFile2.R")
source(file="./IS_analysis/setupFile2.R")
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/IS_analysis")
getwd()
source(file="./IS_analysis/setupFile2.R")
source(file="./IS_analysis/setupVallino.R")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/IS_analysis")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
source(file="setupFile2.R")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
source(file="./IS_analysis/setupFile2.R")
getwd()
source(file="./IS_analysis/setupFile2.R")
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
getwd()
source(file="./IS_analysis/setupFile2.R")
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/")
getwd()
source(file="./IS_analysis/setupFile2.R")
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/")
source(file="./IS_analysis/setupFile2.R")
source(file="./IS_analysis/setupVallino.R")
sheep50wolves100<- read.csv(file="./IS_analysis/additional_data/sheep50wolves100.csv", stringsAsFactors = FALSE)
getwd()
sheep50wolves100<- read.csv(file="./IS_analysis/additional_data/sheep50wolves100.csv", stringsAsFactors = FALSE)
sheep50wolves100<- read.csv(file="/Users/mayalapp/Documents/WoosterStuff/fall2019/IS_organized/analysis/IS_analysis/additional_data/sheep50wolves100.csv", stringsAsFactors = FALSE)
getwd()
knitr::opts_chunk$set(echo = TRUE, root.dir = "~/Documents/WoosterStuff/fall2019/IS_organized/analysis/")
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
source(file="./IS_analysis/setupFile2.R")
getwd()
getwd()
source(file="./IS_analysis/setupFile2.R")
knitr::opts_chunk$set(echo = TRUE, root.dir = "~/Documents/WoosterStuff/fall2019/IS_organized/analysis/")
knitr::opts_chunk$set(echo = TRUE, root.dir = "~/Documents/WoosterStuff/fall2019/IS_organized/analysis/")
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
source(file="./IS_analysis/setupFile2.R")
getwd()
=======
facet_wrap(vars(location))+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Screening Rate")+
ggtitle("East End Colorectal Screenings")
# East end
nLocations = length(unique(clean_data$location))
p1 = list()
for( i in 1: nLocations){
location_i = clean_data$location[i]
p1[[i]] = clean_data%>%filter(location == location_i)%>%
ggplot(aes(x = date, y = all_patients))+
geom_bar(stat = "identity")+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ggtitle(paste(location_i, "Patients (50-75 years old)"))
# # find middle of data
# mid = clean_data%>%filter(location == location_i)%>%summarize(min_rate = min(screening_rate), max_rate = max(screening_rate))
# mid = (mid$max_rate + mid$min_rate)/2
#
# p2 = clean_data%>%filter(location == location_i)%>%
#   ggplot(aes(x = date, y = screening_rate))+
#   geom_point(aes(size = all_patients), color = "blue", alpha = 0.6)+
#   geom_line()+
#   theme_bw()+
#   guides(size = FALSE)+
#   expand_limits(y = c(mid - 2, mid + 2))+
#   labs(x = "Date", y = "Screening Rate")+
#   ggtitle(paste(location_i, "Colorectal Screenings"))
}
print(p1)
grid.arrange(grobs = p1)
clean_data%>%group_by(location)%>%summarize(rate_range = range(screening_rate))
range(c(1,2,3))
clean_data%>%group_by(location)%>%summarize(rate_range = max(screening_rate)- min(screening_rate))
temp_data = clean_data%>%group_by(location)%>%summarize(rate_range = max(screening_rate)- min(screening_rate), mean_rate = mean(screening_rate))
temp_data
max_range = temp_data%>%filter(max(rate_range))$rate_range
max_range = temp_data%>%filter(max(rate_range))
max_range = temp_data%>%filter(rate_range == max(rate_range))
max_range
max_range = temp_data%>%filter(rate_range == max(rate_range))$rate_range
max_range = max_range$rate_range
max_range
temp_data = clean_data%>%group_by(location)%>%summarize(rate_range = max(screening_rate)- min(screening_rate), middle_rate = min(screening_rate) + 0.5 * rate_range)
temp_data
clean_data
temp_data
clean_data
temp_data%>%mutate(ymin = middle_rate - 0.5 * max_range, ymax = middle_rate + 0.5 * max_range)
y_ranges = temp_data%>%mutate(ymin = middle_rate - 0.5 * max_range, ymax = middle_rate + 0.5 * max_range)
i = 1
location_i = clean_data$location[i]
location_i
y_ranges$location[i]
y_ranges$location
y_ranges$location[i]
clean_data$location
clean_data%>%filter(location == location_i)%>%
ggplot(aes(x = date, y = all_patients))+
geom_bar(stat = "identity")+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(y_ranges$ymin[i], y_ranges$ymax[i])
clean_data%>%filter(location == location_i)%>%
ggplot(aes(x = date, y = all_patients))+
geom_bar(stat = "identity")+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(y_ranges$ymin[i], y_ranges$ymax[i])+
ggtitle(paste(location_i, "Patients (50-75 years old)"))
clean_data%>%filter(location == location_i)%>%
ggplot(aes(x = date, y = screening_rate))+
geom_line()+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(y_ranges$ymin[i], y_ranges$ymax[i])+
ggtitle(paste(location_i, "Patients (50-75 years old)"))
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
find_row_index
find_word_row
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
p = df%>%filter(location == loc)%>%
ggplot(aes(x = date, y = screening_rate))+
geom_line()+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(ymin, ymax)+
ggtitle(paste(loc, input$screening.type))
create_screening_plot = function(df, loc, ymin, ymax){
p = df%>%filter(location == loc)%>%
ggplot(aes(x = date, y = screening_rate))+
geom_line()+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(ymin, ymax)+
ggtitle(paste(loc, input$screening.type))
return(p)
}
y_ranges
create_screening_plot(clean_data, "East End", y_ranges$ymin[4], y_ranges$ymax[4])
create_screening_plot = function(df, loc, ymin, ymax){
p = df%>%filter(location == loc)%>%
ggplot(aes(x = date, y = screening_rate))+
geom_line()+
theme_bw()+
guides(size = FALSE)+
labs(x = "Date", y = "Number of Patients")+
ylim(ymin, ymax)+
ggtitle(paste(loc))
return(p)
}
create_screening_plot(clean_data, "East End", y_ranges$ymin[4], y_ranges$ymax[4])
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
install.packages("directlabels")
runApp('Documents/dad_data_project/experimentingColonApp')
brewer.pal(n = 8, name = "Dark2")
runApp('Documents/dad_data_project/experimentingColonApp')
library("RColorBrewer")
brewer.pal(12, "Set3")
runApp('Documents/dad_data_project/experimentingColonApp')
brewer.pal(12, "Dark2")
brewer.pal(12, "Dark2")
runApp('Documents/dad_data_project/experimentingColonApp')
getwd()
getwd()
?readcsv
?read_csv
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location = relevel(clean_data$location, "All")
View(clean_data)
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
N
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location = relevel(clean_data$location, "All")
clean_data$location = relevel(clean_data$location, "All")
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data$location
runApp('Documents/dad_data_project/experimentingColonApp')
clean_data%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
labs(x = ax.date, y = ax.screening, color = ax.location)+
ggtitle(input$screening.type)+
plot_options+
scale_x_date(date_breaks = "1 month",
date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
clean_data%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
ggtitle(input$screening.type)+
plot_options+
scale_x_date(date_breaks = "1 month",
date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
clean_data%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
ggtitle(input$screening.type)+
plot_options+
#scale_x_date(date_breaks = "1 month",
date_labels = "%b %Y",
clean_data%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
ggtitle(input$screening.type)+
plot_options+
#scale_x_date(date_breaks = "1 month",
#date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
#limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
clean_data%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
#ggtitle(input$screening.type)+
#plot_options+
#scale_x_date(date_breaks = "1 month",
#date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
#limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
#ggtitle(input$screening.type)+
#plot_options+
#scale_x_date(date_breaks = "1 month",
#date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
#limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
clean_data%>%filter(location != "CHC")%>%
ggplot(aes(x = date, y = screening_rate, color = location))+
#geom_line(data = data()%>%filter(location == "All"), color = "cyan", size = 10, alpha = 0.5)+   # plot "All" seperately
geom_point(aes())+
geom_line(aes(), size = 1.5)+
#xlim(date_summary$min_date, date_summary$max_date + months(8))+   # change x axis lims?
#annotate("text", x = annotation$date + months(1), y = annotation$screening_rate, label = "  ", size = 10)+   # annotation for avg. rate
theme_bw()+
guides(size = FALSE, color = FALSE)+   # don't include legend for size of dots
#      labs(x = ax.date, y = ax.screening, color = ax.location)+
#ggtitle(input$screening.type)+
#plot_options+
#scale_x_date(date_breaks = "1 month",
#date_labels = "%b %Y",
#labels=date_format("%b-%Y"),
#limits = c(date_summary$min_date,date_summary$max_date + months(1)))+
geom_dl(aes(label = location), method = list(dl.trans(x = x + .3), "last.qp", cex = 1.2)) +
#scale_color_brewer(palette = "Set3")
scale_color_manual(values = c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
library(colorspace)
darken("red")
"red"
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
plot_colors = darken(c("#000000", "#80CDC1", "#B8E186", "#9fb88c", "#92C5DE", "#DFC27D", "#FDB863",  "#EA9999", "#7686c4", "#D5A6BD", "#A2C4C9", "#D5A6BD", "#F4A582"))
plot_colors[i+1]
c(plot_colors[i+1])
create_patient_barplot(clean_data, "East End", 1000)
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
week(2)
months(2)
days(30)
day(30)
runApp('Documents/dad_data_project/experimentingColonApp')
months(2)
runApp('Documents/dad_data_project/experimentingColonApp')
library(lubridate)
months(2)
days(2)
weeks(6)
runApp('Documents/dad_data_project/experimentingColonApp')
head(clean_data)
clean_data$date[11]-clean_data$date[1]
clean_data$date[16]-clean_data$date[1]
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/experimentingColonApp')
runApp()
runApp('Documents/dad_data_project/experimentingColonApp')
runApp()
runApp('Documents/dad_data_project/experimentingColonApp')
runApp('Documents/dad_data_project/appVersions')
>>>>>>> master
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
library(colorspace)
source(file="setupFile2.R")
<<<<<<< HEAD
install.packages("deSolve")
install.packages("minpack.lm")
library(reshape2)
install.packages("reshape2")
load("./IS_analysis/additional_data/noMaxTree.RData")
getwd()
#setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/allData_IS")
load("./IS_analysis/additional_data/logger_and_bm_data.RData")
load("./IS_analysis/additional_data/changeEnf_log1000.RData")
#load data
data1<-getGraphs("./IS_analysis/additional_data/fitToLV.csv")
getGraphs <- function(fileName){
plotFile<-read.csv(file = fileName, header=FALSE, stringsAsFactors=FALSE)[,1:2]
i<-1
j<-1
out<-data.frame(1:2000)
while(i<dim(plotFile)[1]){
if(plotFile[i,2]=="y"){
out[,plotFile[i-8,1]]<-plotFile[(i+1):(i+200),2]
j<- j+1
i<- i+200
print(i)
}
i<-i+1
}
colNames <- c("K", "unsatisfied", "Payoffs", "TotalBM", "GreenPatches", "beta.i", "k.i", "numLoggers")
out<-out[,-1]
colnames(out)<- colNames
for(i in 1:length(colNames)){
out[,i] <-as.numeric(out[,i])
}
return(out)
}
#load data
data1<-getGraphs("./IS_analysis/additional_data/fitToLV.csv")
library(deSolve)
library(dplyr)
library(ggplot2)
library(minpack.lm)
library(tidyr)
library(reshape2)
#setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis/allData_IS")
load("./IS_analysis/additional_data/logger_and_bm_data.RData")
load("./IS_analysis/additional_data/changeEnf_log1000.RData")
getGraphs <- function(fileName){
plotFile<-read.csv(file = fileName, header=FALSE, stringsAsFactors=FALSE)[,1:2]
i<-1
j<-1
out<-data.frame(1:2000)
while(i<dim(plotFile)[1]){
if(plotFile[i,2]=="y"){
out[,plotFile[i-8,1]]<-plotFile[(i+1):(i+200),2]
j<- j+1
i<- i+200
print(i)
}
i<-i+1
}
colNames <- c("K", "unsatisfied", "Payoffs", "TotalBM", "GreenPatches", "beta.i", "k.i", "numLoggers")
out<-out[,-1]
colnames(out)<- colNames
for(i in 1:length(colNames)){
out[,i] <-as.numeric(out[,i])
}
return(out)
}
#varName is the variable (graph) we're interested in, e.g. total biomass or # of loggers
# paramSet is the names for the columns for different parameter options run (e.g. if we want the total BM for simulations where we've run 100 loggers, 200 loggers, 300 loggers.... param set may be c("bm100.", "bm200."....)
# ticks is number of ticks run in simulation
# runs is number of times the simulation was run
#dataIn is list with all of the lists from the simulation, e.g. data1<-list(log200, log300)
makeDF<- function(dataIn, varName, paramSet, ticks, runs){
output<-data.frame(1:(ticks/10))
for(j in 1: length(paramSet)){
for(i in 1:runs){
output[paste(paramSet[j], i, sep='')] <- dataIn[[j]][[i]][varName]
}
}
output<-output[,-1]
return(output)
}
ticksAsCols<- function(dataIn){
output<-t(dataIn)
output<-as.data.frame(output)
output["temp"]<-rownames(output)
output<-output%>%separate(temp, into=c("param", "paramVal", "run"))
output$param <- as.factor(output$param)
output$paramVal <- as.factor(output$paramVal)
return(output)
}
data1<-list(enf1, enf8)
varNames<- c( "bm.1.", "bm.8.")
logEnfBM<-makeDF(data1, "TotalBM",varNames , 7000, 1)
logEnfBM2<-ticksAsCols(logEnfBM)
varNames<- c( "log.1.", "log.8.")
logEnfLog<-makeDF(data1, "numLoggers",varNames , 7000, 1)
logEnfLog2<-ticksAsCols(logEnfLog)
load("./IS_analysis/additional_data/noMaxTree.RData")
data1<-list(noMaxTree)
varNames<- c( "bm")
noMTbm<-makeDF(data1, "TotalBM",varNames , 7000, 1)
noMTbm2<-ticksAsCols(noMTbm)
varNames<- c( "log")
noMTlog<-makeDF(data1, "numLoggers",varNames , 7000, 1)
noMTlog2<-ticksAsCols(noMTlog)
noMT<- data.frame(bm=noMTbm, log=noMTlog)
###############
# fit model to LV eqs
#load data
data1<-getGraphs("./IS_analysis/additional_data/fitToLV.csv")
lvTest1<-data.frame(data1["TotalBM"], data1["numLoggers"])
#set LV equation
scale1=5.5
alpha <- 1/scale1
ymax <- 1000
ymin <- ymax * 0.05
xmax <- 40000
beta <- 0.0032/scale1
gamma <- 0.12/scale1
delta <- 0
params <- c(alpha, beta, delta, gamma, ymin, xmax)
state <- c(X = xmax, Y=ymax)
lotkaVolterra <- function (t, state, parameters){
with(as.list(c(state, parameters)),{
# rate of change
dX <- ( alpha * X - beta * X*Y)
dY <- delta * X * Y - gamma *Y
#return rate of change
list(c(dX, dY))
})
}
times <- seq(0,465, by = 0.1)
out <- ode(y = state, times = times, func = lotkaVolterra, parms = params)
fit_model_to_LV<- as.data.frame(out)
############################
# data with 1000 initial loggers and LV equations
scale1=16
alpha <- 1/scale1
ymax <- 1000
ymin <- ymax * 0.05
xmax <- 40000
beta <- 0.005/scale1
gamma <- 0.2/scale1
delta <- 0
params <- c(alpha, beta, delta, gamma, ymin, xmax)
state <- c(X = xmax, Y=ymax)
lotkaVolterra <- function (t, state, parameters){
with(as.list(c(state, parameters)),{
# rate of change
dX <- ( alpha * X - beta * X*Y)
dY <- delta * X * Y - gamma *Y
#return rate of change
list(c(dX, dY))
})
}
times <- seq(0,465, by = 0.1)
out <- ode(y = state, times = times, func = lotkaVolterra, parms = params)
compare_model_to_LV<- as.data.frame(out)
source(file="setupLVequations.R")
testData = read.csv("./IS_analysis/additional_data/log1000.csv")
testData = read.csv("./allData_IS/log1000.csv")
source(file="setupLVequations.R")
source(file="setupLVequations.R")
testData = read.csv("./allData_IS/additional_data/log1000.csv")
=======
load("./allData_IS/vallinoData/vallino_changeCost.RData")
vallino_dataCost<-dataOut
load("./allData_IS/vallinoData/vallino_changeCost.RData")
getwd()
source(file="setupVallino.R")
color="Set2"
axlab_size <- 12
axtick_size <- 10
ax_kf = expression(paste(bolditalic("final-institution")))
axlab_bm<-"Biomass (% remaining)"
axlab_density <- "Density"
axlab_time <- "Period"
axlab_perc <- "Percent remianing"
ax_sanc = expression(bolditalic(sanction-level))
ax_mon = expression(bolditalic(monitoring-level))
ax_rt=expression(bolditalic("reference-threshold"))
ax_surveillance=expression(bold(bolditalic("surveillance-level")))
ax_mc=expression(bold(bolditalic("minimum-cut")))
# make graph look nice by adding this to the end
setGraphs<- theme_bw()+
theme(axis.text=element_text(size=axtick_size, color="black"),
axis.title=element_text(size=axlab_size,face="bold", color="black"), legend.text = element_text(size=axtick_size))+
theme(panel.border = element_blank(), axis.line = element_line(colour = "black"))
#  scale_color_stata()
# scale_color_brewer(palette="Set1")
#colorDiscrete = scale_color_brewer(palette="Dark2")
colorDiscrete = scale_color_brewer(palette="Set2")
colorCont = scale_color_viridis_c(option = "magma")
#fillDiscrete = scale_fill_brewer(palette="Dark2")
fillDiscrete = scale_fill_brewer(palette="Set2")
fillCont = scale_fill_viridis_c(option = "magma")
# first two colors in Dark2
#1b9e77
#d95f02
color1="#66c2a5"
color2="#fc8d62"
color3="#8da0cb"
# scale_color_colorblind()
# scale_color_OkabeIto()
point_size = 3
line_size = 1.2
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
vallino_lm = lm(TotalBM*100 ~ numLoggers+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
allData1_vallino<-allData_vallino%>%mutate(categories=ifelse(variableValue==300, "log300", ifelse(param=="enf" & variableValue==100, "enf100", 0)))
viz_vallinoKf=allData1_vallino%>%ggplot(aes(K, TotalBM*100, color=categories))+
geom_point(alpha=0.7, size=2)+
setGraphs+
labs(x=ax_kf, y=axlab_bm)+
scale_color_brewer(palette="Set2", name="test", breaks=c("log300", "enf100", "0"), labels=c(expression(paste(italic("initial-loggers"), " = 300")), expression(paste(italic("surveillance-level"), " = 0")), "All other parameter sets"))+
#colorDiscrete+
theme(legend.title=element_blank())
viz_vallinoKf
viz_vallinoKf=allData1_vallino%>%ggplot(aes(K, TotalBM*100, color=categories))+
geom_point(alpha=0.7, size=2)+
setGraphs+
labs(x=ax_kf, y=axlab_bm)+
scale_color_brewer(palette="Set2", name="test", breaks=c("log300", "enf100", "0"), labels=c(expression(paste(italic("initial-loggers"), " = 300")), expression(paste(italic("monitoring-level"), " = 0")), "All other parameter sets"))+
#colorDiscrete+
theme(legend.title=element_blank())
viz_vallinoKf
ggsave("./figs/viz_vallinoKf.pdf", viz_vallinoKf, width=5.75, height=3, units="in")
head(enfData_vallino)
head(enfData_vallino, -6)
vallino_lm2 = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino%>%filter(variableValue != 100))
summary(vallino_lm2)
vallino_lm2 = lm(TotalBM*100 ~ numLoggers+as.numeric(variableValue), data = enfData_vallino%>%filter(variableValue != 100))
summary(vallino_lm2)
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
vallino_lm2 = lm(TotalBM*100 ~ numLoggers+as.numeric(variableValue), data = enfData_vallino%>%filter(variableValue != 100))
summary(vallino_lm2)
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
vallino_lm2 = lm(TotalBM*100 ~ numLoggers+as.numeric(variableValue), data = enfData_vallino%>%filter(variableValue != 100))
summary(vallino_lm2)
monitoring_lm = lm(TotalBM*100 ~ K+as.numeric(variableValue), data = monitoringData)
summary(monitoring_lm)
sanction_lm = lm(TotalBM*100 ~ K+as.numeric(variableValue), data = sanctionData)
summary(sanction_lm)
monitoring_lm = lm(TotalBM*100 ~ K+as.numeric(variableValue), data = monitoringData)
summary(monitoring_lm)
sanction_lm = lm(TotalBM*100 ~ K+as.numeric(variableValue), data = sanctionData)
summary(sanction_lm)
vallino_lm = lm(TotalBM*100 ~ numLoggers+K+as.numeric(variableValue), data = enfData_vallino)
summary(vallino_lm)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(patchwork)
library(ggforce)
#library(pheatmap)
library(ggpubr)
library(colorspace)
source(file="setupFile2.R")
source(file="setupVallino.R")
load("./allData_IS/vallinoData/vallino_changeCost.RData")
getwd()
setwd("~/Documents/WoosterStuff/fall2019/IS_organized/analysis")
load("./allData_IS/vallinoData/vallino_changeCost.RData")
vallino_dataCost<-dataOut
load("./allData_IS/vallinoData/vallino_changeMTG.RData")
vallino_dataMTG<-dataOut
load("./allData_IS/vallinoData/vallino_changeLog.RData")
vallino_dataLog<-dataOut
load("./allData_IS/vallinoData/vallino_changeRT.RData")
vallino_dataRT<-dataOut
load("./allData_IS/vallinoData/vallino_changeEnf.RData")
vallino_dataEnf <-dataOut
View(vallino_dataEnf)
load("./allData_IS/vallino_removed_rt.RData")
vallino_data_removed_rt <- dataOut
costData_vallino<-finalStats_allOutputs(vallino_dataCost, seq(0,20, by=2),  2000, 50)
mtgData_vallino<-finalStats_allOutputs(vallino_dataMTG, seq(5,30, by=5), 2000, 50)
logData_vallino<-finalStats_allOutputs(vallino_dataLog, seq(50,300, by=50),  2000, 50)
rtData_vallino<-finalStats_allOutputs(vallino_dataRT, seq(1,10, by=1),  2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
enfData_vallino<-finalStats_allOutputs(vallino_dataEnf, seq(0,100, by=10), 2000, 50)
removedRTData_vallino<-finalStats_allOutputs_extra(vallino_data_removed_rt, c(50), 2000, 50)
mtgData_vallino<-mtgData_vallino%>%mutate(param="mtg")#%>%addMeans()
costData_vallino<-costData_vallino%>%mutate(param="cost")#%>%addMeans()
rtData_vallino<-rtData_vallino%>%mutate(param="rt")#%>%addMeans()
logData_vallino<-logData_vallino%>%mutate(param="log")#%>%addMeans()
enfData_vallino<-enfData_vallino%>%mutate(param="enf")#%>%addMeans()
allData_vallino<-rbind(mtgData_vallino, costData_vallino,  enfData_vallino, rtData_vallino)
allData_vallino<-rbind(mtgData_vallino, costData_vallino, rtData_vallino, logData_vallino,  enfData_vallino)
allData_vallino<-allData_vallino%>%mutate(param=as.factor(param))
# all simulations use base parameteres
baseData_vallino<-allData_vallino%>%filter((param=="cost" & variableValue==5)|(param=="mtg" & variableValue==20)|(param=="rt" & variableValue==5)|(param=="log" & variableValue==100)|(param=="enf" & variableValue==50))
as.integer(10/2)
10/2
x = 10/2
typeof(x)
typeof(as.integer(x))
>>>>>>> master
